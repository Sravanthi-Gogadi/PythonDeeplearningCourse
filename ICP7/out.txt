b'\n\n\n\n\n\n\n\nPython (programming language) - Wikipedia\n\n\ndocument.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, "$1client-js$2" );\n\n\n(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Python_(programming_language)","wgTitle":"Python (programming language)","wgCurRevisionId":847572033,"wgRevisionId":847572033,"wgArticleId":23862,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["All articles with unsourced statements","Articles with unsourced statements from October 2017","Wikipedia articles needing clarification from May 2018","Articles with unsourced statements from May 2018","Articles containing potentially dated statements from March 2018","All articles containing potentially dated statements","Articles containing potentially dated statements from August 2016","Articles containing potentially dated statements from January 2018","Articles with unsourced statements from March 2018","Articles with Curlie links","Wikipedia articles with BNF identifiers","Wikipedia articles with GND identifiers","Wikipedia articles with LCCN identifiers","Wikipedia articles with SUDOC identifiers","Good articles","Use dmy dates from August 2015","Programming languages","Class-based programming languages","Computational notebook","Computer science in the Netherlands","Cross-platform free software","Dutch inventions","Dynamically typed programming languages","Educational programming languages","High-level programming languages","Information technology in the Netherlands","Object-oriented programming languages","Programming languages created in 1991","Python (programming language)","Scripting languages","Text-oriented programming languages","Cross-platform software"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Python_(programming_language)","wgRelevantArticleId":23862,"wgRequestId":"WzI8LQpAADkAABtH-u8AAABK","wgIsProbablyEditable":true,"wgRelevantPageIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgFlaggedRevsParams":{"tags":{}},"wgStableRevisionId":null,"wgCategoryTreePageCategoryOptions":"{\\"mode\\":0,\\"hideprefix\\":20,\\"showcount\\":true,\\"namespaces\\":false}","wgWikiEditorEnabledModules":[],"wgBetaFeaturesFeatures":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgPopupsShouldSendModuleToUser":true,"wgPopupsConflictsWithNavPopupGadget":false,"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en","usePageImages":true,"usePageDescriptions":true},"wgPreferredVariant":"en","wgMFExpandAllSectionsUserOption":true,"wgMFEnableFontChanger":true,"wgMFDisplayWikibaseDescriptions":{"search":true,"nearby":true,"watchlist":true,"tagline":false},"wgRelatedArticles":null,"wgRelatedArticlesUseCirrusSearch":true,"wgRelatedArticlesOnlyUseCirrusSearch":false,"wgULSCurrentAutonym":"English","wgNoticeProject":"wikipedia","wgCentralNoticeCookiesToDelete":[],"wgCentralNoticeCategoriesUsingLegacy":["Fundraising","fundraising"],"wgWikibaseItemId":"Q28865","wgScoreNoteLanguages":{"arabic":"\xd8\xa7\xd9\x84\xd8\xb9\xd8\xb1\xd8\xa8\xd9\x8a\xd8\xa9","catalan":"catal\xc3\xa0","deutsch":"Deutsch","english":"English","espanol":"espa\xc3\xb1ol","italiano":"italiano","nederlands":"Nederlands","norsk":"norsk","portugues":"portugu\xc3\xaas","suomi":"suomi","svenska":"svenska","vlaams":"West-Vlams"},"wgScoreDefaultNoteLanguage":"nederlands","wgCentralAuthMobileDomain":false,"wgCodeMirrorEnabled":true,"wgVisualEditorToolbarScrollOffset":0,"wgVisualEditorUnsupportedEditParams":["undo","undoafter","veswitched"],"wgEditSubmitButtonLabelPublish":true});mw.loader.state({"ext.gadget.charinsert-styles":"ready","ext.globalCssJs.user.styles":"ready","ext.globalCssJs.site.styles":"ready","site.styles":"ready","noscript":"ready","user.styles":"ready","ext.globalCssJs.user":"ready","ext.globalCssJs.site":"ready","user":"ready","user.options":"ready","user.tokens":"loading","ext.cite.styles":"ready","mediawiki.legacy.shared":"ready","mediawiki.legacy.commonPrint":"ready","wikibase.client.init":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.uls.interlanguage":"ready","ext.wikimediaBadges":"ready","mediawiki.skinning.interface":"ready","skins.vector.styles":"ready"});mw.loader.implement("user.tokens@1dqfd7l",function($,jQuery,require,module){/*@nomin*/mw.user.tokens.set({"editToken":"+\\\\","patrolToken":"+\\\\","watchToken":"+\\\\","csrfToken":"+\\\\"});\n});mw.loader.load(["ext.cite.a11y","site","mediawiki.page.startup","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.toc","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.watchlist-notice","ext.gadget.DRN-wizard","ext.gadget.charinsert","ext.gadget.refToolbar","ext.gadget.extra-toolbar-buttons","ext.gadget.switcher","ext.centralauth.centralautologin","mmv.head","mmv.bootstrap.autostart","ext.popups","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.eventLogging.subscriber","ext.wikimediaEvents","ext.navigationTiming","ext.uls.eventlogger","ext.uls.init","ext.uls.compactlinks","ext.uls.interface","ext.3d","ext.centralNotice.geoIP","ext.centralNotice.startUp","skins.vector.js"]);});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython (programming language)\n \n\n\nFrom Wikipedia, the free encyclopedia\n \n\n\n \nJump to navigation\n\n\nJump to search\n\n\n\n\nPython\n\n\n\n\n\n\n\n\n\n\nParadigm\n\n\nObject-oriented\n, \nimperative\n, \nfunctional\n, \nprocedural\n, \nreflective\n\n\n\n\n\n\nDesigned\xc2\xa0by\n\n\nGuido van Rossum\n\n\n\n\n\n\nDeveloper\n\n\nPython Software Foundation\n\n\n\n\n\n\nFirst\xc2\xa0appeared\n\n\n1990\n[1]\n\n\n\n\n\n\n\n\n\n\n\n\nStable release\n\n\n\n\n3.6.5 / 28\xc2\xa0March 2018\n; 2 months ago\n\xc2\xa0(\n2018-03-28\n)\n[2]\n\n2.7.15 / 1\xc2\xa0May 2018\n; 56 days ago\n\xc2\xa0(\n2018-05-01\n)\n[3]\n\n\n\n\n\n\n\n\nPreview release\n\n\n\n\n3.7.0b5\n[4]\n / 30\xc2\xa0May 2018\n; 27 days ago\n\xc2\xa0(\n2018-05-30\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTyping discipline\n\n\n\n\nDuck\n, \ndynamic\n, \nstrong\n \nsince version 3.5:\n\n\nGradual\n[5]\n\n\n\n\n\n\nLicense\n\n\nPython Software Foundation License\n\n\n\n\n\n\nFilename extensions\n\n\n.py, .pyc, .pyd, .pyo (prior to 3.5),\n[6]\n .pyw, .pyz (since 3.5)\n[7]\n\n\n\n\n\n\nWebsite\n\n\nwww\n.python\n.org\n\n\n\n\n\n\nMajor \nimplementations\n\n\n\n\n\n\nCPython\n, \nIronPython\n, \nJython\n, \nMicroPython\n, \nNumba\n, \nPyPy\n, \nStackless Python\n\n\n\n\n\n\nDialects\n\n\n\n\n\n\nCython\n, \nRPython\n\n\n\n\n\n\nInfluenced by\n\n\n\n\n\n\nABC\n,\n[8]\n \nALGOL 68\n,\n[9]\n \nC\n,\n[10]\n \nC++\n,\n[11]\n \nCLU\n,\n[12]\n \nDylan\n,\n[13]\n \nHaskell\n,\n[14]\n \nIcon\n,\n[15]\n \nJava\n,\n[16]\n \nLisp\n,\n[17]\n \nModula-3\n,\n[11]\n \nPerl\n\n\n\n\n\n\nInfluenced\n\n\n\n\n\n\nBoo\n, \nCobra\n, \nCoconut\n,\n[18]\n \nCoffeeScript\n,\n[19]\n \nD\n, \nF#\n, \nFalcon\n, \nGenie\n,\n[20]\n \nGo\n, \nGroovy\n, \nJavaScript\n,\n[21]\n[22]\n \nJulia\n,\n[23]\n \nNim\n, \nRing\n,\n[24]\n \nRuby\n,\n[25]\n \nSwift\n[26]\n\n\n\n\n\n\n\n\n\n\n \nPython Programming\n at Wikibooks\n\n\n\n\n\n\n\n\n\n\nPython\n is an \ninterpreted\n \nhigh-level programming language\n for \ngeneral-purpose programming\n. Created by \nGuido van Rossum\n and first released in 1991, Python has a design philosophy that emphasizes \ncode readability\n, notably using \nsignificant whitespace\n. It provides constructs that enable clear programming on both small and large scales.\n[27]\n\n\nPython features a \ndynamic type\n system and automatic \nmemory management\n. It supports multiple \nprogramming paradigms\n, including \nobject-oriented\n, \nimperative\n, \nfunctional\n and \nprocedural\n, and has a large and comprehensive \nstandard library\n.\n[28]\n\n\nPython interpreters are available for many \noperating systems\n. \nCPython\n, the \nreference implementation\n of Python, is \nopen source\n software\n[29]\n and has a community-based development model, as do nearly all of its variant implementations. CPython is managed by the non-profit \nPython Software Foundation\n.\n\n\n\n\n\n\n\n\nContents\n\n\n\n\n\n\n1\n \nHistory\n\n\n2\n \nFeatures and philosophy\n\n\n3\n \nSyntax and semantics\n\n\n\n\n3.1\n \nIndentation\n\n\n3.2\n \nStatements and control flow\n\n\n3.3\n \nExpressions\n\n\n3.4\n \nMethods\n\n\n3.5\n \nTyping\n\n\n3.6\n \nMathematics\n\n\n\n\n\n\n4\n \nLibraries\n\n\n5\n \nDevelopment environments\n\n\n6\n \nImplementations\n\n\n\n\n6.1\n \nReference implementation\n\n\n6.2\n \nOther implementations\n\n\n6.3\n \nUnsupported implementations\n\n\n6.4\n \nCross-compilers to other languages\n\n\n6.5\n \nPerformance\n\n\n\n\n\n\n7\n \nDevelopment\n\n\n8\n \nNaming\n\n\n9\n \nUses\n\n\n10\n \nLanguages influenced by Python\n\n\n11\n \nSee also\n\n\n12\n \nReferences\n\n\n13\n \nFurther reading\n\n\n14\n \nExternal links\n\n\n\n\n\n\n\n\nHistory\n[\nedit\n]\n\n\n\n\n\n\n\n\n\n\nGuido van Rossum\n, the creator of Python\n\n\n\n\n\n\nMain article: \nHistory of Python\n\n\nPython was conceived in the late 1980s,\n[30]\n and its implementation began in December 1989\n[31]\n by \nGuido van Rossum\n at \nCentrum Wiskunde & Informatica\n (CWI) in the \nNetherlands\n as a successor to the \nABC language\n (itself inspired by \nSETL\n)\n[32]\n capable of \nexception handling\n and interfacing with the \nAmoeba\n operating system.\n[8]\n Van Rossum remains Python\'s principal author. His continuing central role in Python\'s development is reflected in the title given to him by the Python community: \nBenevolent Dictator For Life\n (BDFL).\n\n\nOn the origins of Python, Van Rossum wrote in 1996:\n[33]\n\n\n\n\n...In December 1989, I was looking for a "hobby" programming project that would keep me occupied during the week around Christmas. My office ... would be closed, but I had a home computer, and not much else on my hands. I decided to write an interpreter for the new scripting language I had been thinking about lately: a descendant of \nABC\n that would appeal to \nUnix\n/\nC\n \nhackers\n. I chose Python as a working title for the project, being in a slightly irreverent mood (and a big fan of \nMonty Python\'s Flying Circus\n).\n\n\n\xe2\x80\x94\xe2\x80\x89\nGuido van Rossum\n\n\n\n\nPython 2.0 was released on 16 October 2000 and had many major new features, including a \ncycle-detecting\n \ngarbage collector\n and support for \nUnicode\n. With this release, the development process became more transparent and community-backed.\n[34]\n\n\nPython 3.0 (initially called Python 3000 or py3k) was released on 3 December 2008 after a long testing period. It is a major revision of the language that is not completely \nbackward-compatible\n with previous versions.\n[35]\n However, many of its major features have been \nbackported\n to the Python 2.6.x\n[36]\n and 2.7.x version series, and releases of Python 3 include the \n2to3\n utility, which automates the translation of Python 2 code to Python 3.\n[37]\n\n\nPython 2.7\'s \nend-of-life\n date was initially set at 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3.\n[38]\n[39]\n In January 2017, Google announced work on a Python 2.7 to \nGo\n \ntranscompiler\n to improve performance under concurrent workloads.\n[40]\n\n\nFeatures and philosophy\n[\nedit\n]\n\n\nPython is a \nmulti-paradigm programming language\n. \nObject-oriented programming\n and \nstructured programming\n are fully supported, and many of its features support \nfunctional programming\n and \naspect-oriented programming\n (including by \nmetaprogramming\n[41]\n and \nmetaobjects\n (magic methods)).\n[42]\n Many other paradigms are supported via extensions, including \ndesign by contract\n[43]\n[44]\n and \nlogic programming\n.\n[45]\n\n\nPython uses \ndynamic typing\n, and a combination of \nreference counting\n and a cycle-detecting garbage collector for \nmemory management\n. It also features dynamic \nname resolution\n (\nlate binding\n), which binds method and variable names during program execution.\n\n\nPython\'s design offers some support for \nfunctional programming\n in the \nLisp\n tradition. It has \nfilter()\n, \nmap()\n, and \nreduce()\n functions; \nlist comprehensions\n, \ndictionaries\n, and sets; and \ngenerator\n expressions.\n[46]\n The standard library has two modules (itertools and functools) that implement functional tools borrowed from \nHaskell\n and \nStandard ML\n.\n[47]\n\n\nThe language\'s core philosophy is summarized in the document \nThe \nZen of Python\n (\nPEP 20\n), which includes \naphorisms\n such as:\n[48]\n\n\n\n\nBeautiful is better than ugly\n\n\nExplicit is better than implicit\n\n\nSimple is better than complex\n\n\nComplex is better than complicated\n\n\nReadability counts\n\n\n\n\nRather than having all of its functionality built into its core, Python was designed to be highly extensible. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum\'s vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with \nABC\n, which espoused the opposite approach.\n[30]\n\n\nWhile offering choice in coding methodology, the Python philosophy rejects exuberant syntax (such as that of \nPerl\n) in favor of a simpler, less-cluttered grammar. As \nAlex Martelli\n put it: "To describe something as \'clever\' is \nnot\n considered a compliment in the Python culture."\n[49]\n Python\'s philosophy rejects the Perl "\nthere is more than one way to do it\n" approach to language design in favor of "there should be one\xe2\x80\x94and preferably only one\xe2\x80\x94obvious way to do it".\n[48]\n\n\nPython\'s developers strive to avoid \npremature optimization\n, and reject patches to non-critical parts of CPython that would offer marginal increases in speed at the cost of clarity.\n[50]\n When speed is important, a Python programmer can move time-critical functions to extension modules written in languages such as C, or use \nPyPy\n, a \njust-in-time compiler\n. \nCython\n is also available, which translates a Python script into C and makes direct C-level API calls into the Python interpreter.\n\n\nAn important goal of Python\'s developers is keeping it fun to use. This is reflected in the language\'s name\xe2\x80\x94a tribute to the British comedy group \nMonty Python\n[51]\n\xe2\x80\x94and in occasionally playful approaches to tutorials and reference materials, such as examples that refer to spam and eggs (from a \nfamous Monty Python sketch\n) instead of the standard \nfoo and bar\n.\n[52]\n[53]\n\n\nA common \nneologism\n in the Python community is \npythonic\n, which can have a wide range of meanings related to program style. To say that code is pythonic is to say that it uses Python idioms well, that it is natural or shows fluency in the language, that it conforms with Python\'s minimalist philosophy and emphasis on readability. In contrast, code that is difficult to understand or reads like a rough transcription from another programming language is called \nunpythonic\n.\n\n\nUsers and admirers of Python, especially those considered knowledgeable or experienced, are often referred to as \nPythonists\n, \nPythonistas\n, and \nPythoneers\n.\n[54]\n[55]\n\n\nSyntax and semantics\n[\nedit\n]\n\n\nMain article: \nPython syntax and semantics\n\n\nPython is meant to be an easily readable language. Its formatting is visually uncluttered, and it often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use \ncurly brackets\n to delimit blocks, and semicolons after statements are optional. It has fewer syntactic exceptions and special cases than \nC\n or \nPascal\n.\n[56]\n\n\nIndentation\n[\nedit\n]\n\n\nMain article: \nPython syntax and semantics \xc2\xa7\xc2\xa0Indentation\n\n\nPython uses \nwhitespace\n indentation, rather than \ncurly brackets\n or keywords, to delimit \nblocks\n. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.\n[57]\n Thus, the program\'s visual structure accurately represents the program\'s semantic structure.\n[1]\n This feature is also sometimes termed the \noff-side rule\n.\n\n\nStatements and control flow\n[\nedit\n]\n\n\nPython\'s \nstatements\n include (among others):\n\n\n\n\nThe assignment statement (token \'=\', the equals sign). This operates differently than in traditional \nimperative programming\n languages, and this fundamental mechanism (including the nature of Python\'s version of \nvariables\n) illuminates many other features of the language. Assignment in \nC\n, e.g., \nx = 2\n, translates to "typed variable name x receives a copy of numeric value 2". The (right-hand) value is copied into an \nallocated storage location\n for which the (left-hand) \nvariable name\n is the symbolic address. The memory allocated to the variable is large enough (potentially quite large) for the declared \ntype\n. In the simplest case of Python assignment, using the same example, \nx = 2\n, translates to "(generic) name x receives a \nreference\n to a separate, dynamically allocated \nobject\n of numeric (int) type of value 2." This is termed \nbinding\n the name to the object. Since the name\'s storage location doesn\'t \ncontain\n the indicated value, it is improper to call it a \nvariable\n. Names may be subsequently rebound at any time to objects of greatly varying types, including strings, procedures, complex objects with data and methods, etc. Successive assignments of a common value to multiple names, e.g., \nx = 2\n; \ny = 2\n; \nz = 2\n result in allocating storage to (at most) three names and one numeric object, to which all three names are bound. Since a name is a generic reference holder it is unreasonable to associate a fixed \ndata type\n with it. However at a given time a name will be bound to \nsome\n object, which \nwill\n have a type; thus there is \ndynamic typing\n.\n\n\nThe \nif\n statement, which conditionally executes a block of code, along with \nelse\n and \nelif\n (a contraction of else-if).\n\n\nThe \nfor\n statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block.\n\n\nThe \nwhile\n statement, which executes a block of code as long as its condition is true.\n\n\nThe \ntry\n statement, which allows exceptions raised in its attached code block to be caught and handled by \nexcept\n clauses; it also ensures that clean-up code in a \nfinally\n block will always be run regardless of how the block exits.\n\n\nThe \nraise\n statement, used to raise a specified exception or re-raise a caught exception.\n\n\nThe \nclass\n statement, which executes a block of code and attaches its local namespace to a \nclass\n, for use in \nobject-oriented programming\n.\n\n\nThe \ndef\n statement, which defines a \nfunction\n or \nmethod\n.\n\n\nThe \nwith\n statement, from Python 2.5 released on September 2006,\n[58]\n which encloses a code block within a context manager (for example, acquiring a \nlock\n before the block of code is run and releasing the lock afterwards, or opening a \nfile\n and then closing it), allowing \nResource Acquisition Is Initialization\n (RAII)-like behavior and replaces a common try/finally idiom.\n[59]\n\n\nThe \npass\n statement, which serves as a \nNOP\n. It is syntactically needed to create an empty code block.\n\n\nThe \nassert\n statement, used during debugging to check for conditions that ought to apply.\n\n\nThe \nyield\n statement, which returns a value from a \ngenerator\n function. From Python 2.5, \nyield\n is also an operator. This form is used to implement \ncoroutines\n.\n\n\nThe \nimport\n statement, which is used to import modules whose functions or variables can be used in the current program. There are three ways of using import: \nimport <module name> [as <alias>]\n or \nfrom <module name> import *\n or \nfrom <module name> import <definition 1> [as <alias 1>], <definition 2> [as <alias 2>], ...\n.\n\n\nThe \nprint\n statement was changed to the \nprint()\n function in Python 3.\n[60]\n\n\n\n\nPython does not support \ntail call\n optimization or \nfirst-class continuations\n, and, according to Guido van Rossum, it never will.\n[61]\n[62]\n However, better support for \ncoroutine\n-like functionality is provided in 2.5, by extending Python\'s \ngenerators\n.\n[63]\n Before 2.5, generators were \nlazy\n \niterators\n; information was passed unidirectionally out of the generator. From Python 2.5, it is possible to pass information back into a generator function, and from Python 3.3, the information can be passed through multiple stack levels.\n[64]\n\n\nExpressions\n[\nedit\n]\n\n\nSome Python \nexpressions\n are similar to languages such as \nC\n and \nJava\n, while some are not:\n\n\n\n\nAddition, subtraction, and multiplication are the same, but the behavior of division differs. There are two types of divisions in Python. They are floor division and integer division.\n[65]\n Python also added the \n**\n operator for exponentiation.\n\n\nFrom Python 3.5, the new \n@\n infix operator was introduced. It is intended to be used by libraries such as NumPy for \nmatrix multiplication\n.\n[66]\n[67]\n\n\nIn Python, \n==\n compares by value, versus Java, which compares numerics by value\n[68]\n and objects by reference.\n[69]\n (Value comparisons in Java on objects can be performed with the \nequals()\n method.) Python\'s \nis\n operator may be used to compare object identities (comparison by reference). In Python, comparisons may be chained, for example \na <= b <= c\n.\n\n\nPython uses the words \nand\n, \nor\n, \nnot\n for its boolean operators rather than the symbolic \n&&\n, \n||\n, \n!\n used in Java and C.\n\n\nPython has a type of expression termed a \nlist comprehension\n. Python 2.4 extended list comprehensions into a more general expression termed a \ngenerator\n expression\n.\n[46]\n\n\nAnonymous functions\n are implemented using \nlambda expressions\n; however, these are limited in that the body can only be one expression.\n\n\nConditional expressions in Python are written as \nx if c else y\n[70]\n (different in order of operands from the \nc ? x : y\n operator common to many other languages).\n\n\nPython makes a distinction between \nlists\n and \ntuples\n. Lists are written as \n[1, 2, 3]\n, are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be \nimmutable\n in Python). Tuples are written as \n(1, 2, 3)\n, are immutable and thus can be used as the keys of dictionaries, provided all elements of the tuple are immutable. The \n+\n operator can be used to concatenate two tuples, which does not directly modify their contents, but rather produces a new tuple containing the elements of both provided tuples. Thus, given the variable \nt\n initially equal to \n(1, 2, 3)\n, executing \nt = t + (4, 5)\n first evaluates \nt + (4, 5)\n, which yields \n(1, 2, 3, 4, 5)\n, which is then assigned back to \nt\n, thereby effectively "modifying the contents" of \nt\n, while conforming to the immutable nature of tuple objects. Parentheses are optional for tuples in unambiguous contexts.\n[71]\n\n\nPython features \nsequence unpacking\n where multiple expressions, each evaluating to anything that can be assigned to (a variable, a writable property, etc.), are associated in the identical manner to that forming tuple literals and, as a whole, are put on the left hand side of the equal sign in an assignment statement. The statement expects an \niterable\n object on the right hand side of the equal sign that produces the same number of values as the provided writable expressions when iterated through, and will iterate through it, assigning each of the produced values to the corresponding expression on the left.\n[\ncitation needed\n]\n\n\nPython has a "string format" operator \n%\n. This functions analogous to \nprintf\n format strings in \nC\n, e.g. \n"spam=%s eggs=%d"\xc2\xa0% ("blah", 2)\n evaluates to \n"spam=blah eggs=2"\n. In Python 3 and 2.6+, this was supplemented by the \nformat()\n method of the \nstr\n class, e.g. \n"spam={0} eggs={1}".format("blah", 2)\n. Python 3.6 added "f-strings": \nblah = "blah"; eggs = 2; f\'spam={blah} eggs={eggs}\'\n.\n[72]\n\n\nPython has various kinds of \nstring literals\n:\n\n\n\nStrings delimited by single or double quote marks. Unlike in \nUnix shells\n, \nPerl\n and Perl-influenced languages, single quote marks and double quote marks function identically. Both kinds of string use the backslash (\n\\\n) as an \nescape character\n. \nString interpolation\n became available in Python 3.6 as "formatted string literals".\n[72]\n\n\nTriple-quoted strings, which begin and end with a series of three single or double quote marks. They may span multiple lines and function like \nhere documents\n in shells, Perl and \nRuby\n.\n\n\nRaw string\n varieties, denoted by prefixing the string literal with an \nr\n. Escape sequences are not interpreted; hence raw strings are useful where literal backslashes are common, such as \nregular expressions\n and \nWindows\n-style paths. Compare "\n@\n-quoting" in \nC#\n.\n\n\n\n\n\n\nPython has \narray index\n and \narray slicing\n expressions on lists, denoted as \na[key]\n, \na[start:stop]\n or \na[start:stop:step]\n. Indexes are \nzero-based\n, and negative indexes are relative to the end. Slices take elements from the \nstart\n index up to, but not including, the \nstop\n index. The third slice parameter, called \nstep\n or \nstride\n, allows elements to be skipped and reversed. Slice indexes may be omitted, for example \na[:]\n returns a copy of the entire list. Each element of a slice is a \nshallow copy\n.\n\n\n\n\nIn Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as \nCommon Lisp\n, \nScheme\n, or \nRuby\n. This leads to duplicating some functionality. For example:\n\n\n\n\nList comprehensions\n vs. \nfor\n-loops\n\n\nConditional\n expressions vs. \nif\n blocks\n\n\nThe \neval()\n vs. \nexec()\n built-in functions (in Python 2, \nexec\n is a statement); the former is for expressions, the latter is for statements.\n\n\n\n\nStatements cannot be a part of an expression, so list and other comprehensions or \nlambda expressions\n, all being expressions, cannot contain statements. A particular case of this is that an assignment statement such as \na = 1\n cannot form part of the conditional expression of a conditional statement. This has the advantage of avoiding a classic C error of mistaking an assignment operator \n=\n for an equality operator \n==\n in conditions: \nif (c = 1) { ... }\n is syntactically valid (but probably unintended) C code but \nif c = 1: ...\n causes a syntax error in Python.\n\n\nMethods\n[\nedit\n]\n\n\nMethods\n on objects are \nfunctions\n attached to the object\'s class; the syntax \ninstance.method(argument)\n is, for normal methods and functions, \nsyntactic sugar\n for \nClass.method(instance, argument)\n. Python methods have an explicit \nself\n parameter to access \ninstance data\n, in contrast to the implicit \nself\n (or \nthis\n) in some other object-oriented programming languages (e.g., \nC++\n, \nJava\n, \nObjective-C\n, or \nRuby\n).\n[73]\n\n\nTyping\n[\nedit\n]\n\n\nPython uses \nduck typing\n and has typed objects but untyped variable names. Type constraints are not checked at \ncompile time\n; rather, operations on an object may fail, signifying that the given object is not of a suitable type. Despite being \ndynamically typed\n, Python is \nstrongly typed\n, forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them.\n\n\nPython allows programmers to define their own types using \nclasses\n, which are most often used for \nobject-oriented programming\n. New \ninstances\n of classes are constructed by calling the class (for example, \nSpamClass()\n or \nEggsClass()\n), and the classes are instances of the \nmetaclass\n \ntype\n (itself an instance of itself), allowing \nmetaprogramming\n and \nreflection\n.\n\n\nBefore version 3.0, Python had two kinds of classes: \nold-style\n and \nnew-style\n.\n[74]\n The syntax of both styles is the same, the difference being whether the class \nobject\n is inherited from, directly or indirectly (all new-style classes inherit from \nobject\n and are instances of \ntype\n). In versions of Python 2 from Python 2.2 onwards, both kinds of classes can be used. Old-style classes were eliminated in Python 3.0.\n\n\nThe long term plan is to support \ngradual typing\n[75]\n and from Python 3.5, the syntax of the language allows specifying static types but they are not checked in the default implementation, CPython. An experimental optional static type checker named \nmypy\n supports compile-time type checking.\n[76]\n\n\n\n\nSummary of Python 3\'s built-in types\n\n\n\n\nType\n\n\nmutable\n\n\nDescription\n\n\nSyntax example\n\n\n\n\n\n\nbool\n\n\nimmutable\n\n\nBoolean value\n\n\nTrue\n\n\nFalse\n\n\n\n\n\n\nbytearray\n\n\nmutable\n\n\nSequence of \nbytes\n\n\nbytearray(b\'Some ASCII\')\n\n\nbytearray(b"Some ASCII")\n\n\nbytearray([119, 105, 107, 105])\n\n\n\n\n\n\nbytes\n\n\nimmutable\n\n\nSequence of bytes\n\n\nb\'Some ASCII\'\n\n\nb"Some ASCII"\n\n\nbytes([119, 105, 107, 105])\n\n\n\n\n\n\ncomplex\n\n\nimmutable\n\n\nComplex number\n with real and imaginary parts\n\n\n3+2.7j\n\n\n\n\n\n\ndict\n\n\nmutable\n\n\nAssociative array\n (or dictionary) of key and value pairs; can contain mixed types (keys and values), keys must be a hashable type\n\n\n{\'key1\': 1.0, 3: False}\n\n\n\n\n\n\nellipsis\n\n\n\n\nAn \nellipsis\n placeholder to be used as an index in \nNumPy\n arrays\n\n\n...\n\n\n\n\n\n\nfloat\n\n\nimmutable\n\n\nFloating point\n number, system-defined precision\n\n\n3.1415927\n\n\n\n\n\n\nfrozenset\n\n\nimmutable\n\n\nUnordered \nset\n, contains no duplicates; can contain mixed types, if hashable\n\n\nfrozenset([4.0, \'string\', True])\n\n\n\n\n\n\nint\n\n\nimmutable\n\n\nInteger\n of unlimited magnitude\n[77]\n\n\n42\n\n\n\n\n\n\nlist\n\n\nmutable\n\n\nList\n, can contain mixed types\n\n\n[4.0, \'string\', True]\n\n\n\n\n\n\nset\n\n\nmutable\n\n\nUnordered \nset\n, contains no duplicates; can contain mixed types, if hashable\n\n\n{4.0, \'string\', True}\n\n\n\n\n\n\nstr\n\n\nimmutable\n\n\nA \ncharacter string\n: sequence of Unicode codepoints\n\n\n\'Wikipedia\'\n\n\n"Wikipedia"\n\n\n"""Spanning\n\nmultiple\n\nlines"""\n\n\n\n\n\n\ntuple\n\n\nimmutable\n\n\nCan contain mixed types\n\n\n(4.0, \'string\', True)\n\n\n\n\n\n\nMathematics\n[\nedit\n]\n\n\nPython has the usual C arithmetic operators (\n+\n, \n-\n, \n*\n, \n/\n, \n%\n). It also has \n**\n for exponentiation, e.g. \n5**3 == 125\n and \n9**0.5 == 3.0\n, and a new matrix multiply \n@\n operator is included in version 3.5.\n[78]\n Additionally, it has a unary operator (\n~\n), which essentially inverts all the bits of its one argument. For integers, this means \n~x=-x-1\n.\n[79]\n Other operators include bitwise shift operators \nx << y\n, which shifts \nx\n to the left \ny\n places, the same as \nx*(2**y)\n , and \nx >> y\n, which shifts \nx\n to the right \ny\n places, the same as \nx//(2**y)\n .\n[80]\n\n\nThe behavior of division has changed significantly over time:\n[81]\n[\nwhy?\n]\n\n\n\n\nPython 2.1 and earlier use the C division behavior. The \n/\n operator is integer division if both operands are integers, and floating-point division otherwise. Integer division rounds towards 0, e.g. \n7/3 == 2\n and \n-7/3 == -2\n.\n\n\nPython 2.2 changes integer division to round towards negative infinity, e.g. \n7/3 == 2\n and \n-7/3 == -3\n. The floor division \n//\n operator is introduced. So \n7//3 == 2\n, \n-7//3 == -3\n, \n7.5//3 == 2.0\n and \n-7.5//3 == -3.0\n. Adding \nfrom __future__ import division\n causes a module to use Python 3.0 rules for division (see next).\n\n\nPython 3.0 changes \n/\n to be always floating-point division. In Python terms, the pre-3.0 \n/\n is \nclassic division\n, the version-3.0 \n/\n is \nreal division\n, and \n//\n is \nfloor division\n.\n\n\n\n\nRounding towards negative infinity, though different from most languages, adds consistency. For instance, it means that the equation \n(a + b)//b == a//b + 1\n is always true. It also means that the equation \nb*(a//b) + a%b == a\n is valid for both positive and negative values of \na\n. However, maintaining the validity of this equation means that while the result of \na%b\n is, as expected, in the \nhalf-open interval\n [0, \nb\n), where \nb\n is a positive integer, it has to lie in the interval (\nb\n, 0] when \nb\n is negative.\n[82]\n\n\nPython provides a \nround\n function for \nrounding\n a float to the nearest integer. For \ntie-breaking\n, versions before 3 use round-away-from-zero: \nround(0.5)\n is 1.0, \nround(-0.5)\n is \xe2\x88\x921.0.\n[83]\n Python 3 uses \nround to even\n: \nround(1.5)\n is 2, \nround(2.5)\n is 2.\n[84]\n\n\nPython allows boolean expressions with multiple equality relations in a manner that is consistent with general use in mathematics. For example, the expression \na < b < c\n tests whether \na\n is less than \nb\n and \nb\n is less than \nc\n.\n[85]\n C-derived languages interpret this expression differently: in C, the expression would first evaluate \na < b\n, resulting in 0 or 1, and that result would then be compared with \nc\n.\n[86]\n\n\nPython has extensive built-in support for \narbitrary precision arithmetic\n. Integers are transparently switched from the machine-supported maximum fixed-precision (usually 32 or 64 bits), belonging to the python type \nint\n, to arbitrary precision, belonging to the Python type \nlong\n, where needed. The latter have an "L" suffix in their textual representation.\n[87]\n (In Python 3, the distinction between the \nint\n and \nlong\n types was eliminated; this behavior is now entirely contained by the \nint\n class.) The \nDecimal\n type/class in module \ndecimal\n (since version 2.4) provides decimal floating point numbers to arbitrary precision and several rounding modes.\n[88]\n The \nFraction\n type in module \nfractions\n (since version 2.6) provides arbitrary precision for rational numbers.\n[89]\n\n\nDue to Python\'s extensive mathematics library, and the third-party library \nNumPy\n that further extends the native capabilities, it is frequently used as a scientific scripting language to aid in problems such as numerical data processing and manipulation.\n[\ncitation needed\n]\n\n\nLibraries\n[\nedit\n]\n\n\nPython\'s large \nstandard library\n, commonly cited as one of its greatest strengths,\n[90]\n provides tools suited to many tasks. For Internet-facing applications, many standard formats and protocols such as \nMIME\n and \nHTTP\n are supported. It includes modules for creating \ngraphical user interfaces\n, connecting to \nrelational databases\n, \ngenerating pseudorandom numbers\n, arithmetic with arbitrary precision decimals,\n[91]\n manipulating \nregular expressions\n, and \nunit testing\n.\n\n\nSome parts of the standard library are covered by specifications (for example, the \nWeb Server Gateway Interface\n (WSGI) implementation \nwsgiref\n follows PEP 333\n[92]\n), but most modules are not. They are specified by their code, internal documentation, and test suites (if supplied). However, because most of the standard library is cross-platform Python code, only a few modules need altering or rewriting for variant implementations.\n\n\nAs of March\xc2\xa02018,\n[update]\n the \nPython Package Index\n (PyPI), the official repository for third-party Python software, contains over 130,000\n[93]\n packages with a wide range of functionality, including:\n\n\n\n\nGraphical user interfaces\n\n\nWeb frameworks\n\n\nMultimedia\n\n\nDatabases\n\n\nNetworking\n\n\nTest frameworks\n\n\nAutomation\n\n\nWeb scraping\n[94]\n\n\nDocumentation\n\n\nSystem administration\n\n\nScientific computing\n\n\nText processing\n\n\nImage processing\n\n\n\n\nDevelopment environments\n[\nedit\n]\n\n\nSee also: \nComparison of integrated development environments \xc2\xa7\xc2\xa0Python\n\n\nMost Python implementations (including CPython) include a \nread\xe2\x80\x93eval\xe2\x80\x93print loop\n (REPL), permitting them to function as a \ncommand line interpreter\n for which the user enters statements sequentially and receives results immediately.\n\n\nOther shells, including \nIDLE\n and \nIPython\n, add further abilities such as auto-completion, session state retention and \nsyntax highlighting\n.\n\n\nAs well as standard desktop \nintegrated development environments\n (see Wikipedia\'s "\nPython IDE\n" article), there are \nWeb browser\n-based IDEs; \nSageMath\n (intended for developing science and math-related Python programs); \nPythonAnywhere\n, a browser-based IDE and hosting environment; and Canopy IDE, a commercial Python IDE emphasizing scientific computing.\n[95]\n\n\nImplementations\n[\nedit\n]\n\n\nSee also: \nList of Python software \xc2\xa7\xc2\xa0Python implementations\n\n\nReference implementation\n[\nedit\n]\n\n\nCPython\n is the \nreference implementation\n of Python. It is written in \nC\n, meeting the \nC89\n standard with several select \nC99\n features.\n[96]\n It compiles Python programs into an intermediate \nbytecode\n[97]\n which is then executed by its \nvirtual machine\n.\n[98]\n CPython is distributed with a large standard library written in a mixture of C and native Python. It is available for many platforms, including \nWindows\n and most modern \nUnix-like\n systems. Platform portability was one of its earliest priorities.\n[99]\n\n\nOther implementations\n[\nedit\n]\n\n\nPyPy\n is a fast, compliant\n[100]\n interpreter of Python 2.7 and 3.5. Its \njust-in-time compiler\n brings a significant speed improvement over CPython.\n[101]\n\n\nStackless Python\n is a significant fork of CPython that implements \nmicrothreads\n; it does not use the C memory stack, thus allowing massively concurrent programs. PyPy also has a stackless version.\n[102]\n\n\nMicroPython\n and \nCircuitPython\n are Python 3 variants optimised for \nmicrocontrollers\n.\n\n\nUnsupported implementations\n[\nedit\n]\n\n\nOther just-in-time Python compilers have been developed, but are now unsupported:\n\n\n\n\nGoogle began a project named \nUnladen Swallow\n in 2009 with the aim of speeding up the Python interpreter fivefold by using the \nLLVM\n, and of improving its multithreading ability to scale to thousands of cores.\n[103]\n\n\nPsyco\n is a \njust-in-time\n \nspecialising\n compiler that integrates with CPython and transforms bytecode to machine code at runtime. The emitted code is specialised for certain \ndata types\n and is faster than standard Python code.\n\n\n\n\nIn 2005, \nNokia\n released a Python interpreter for the \nSeries 60\n mobile phones named \nPyS60\n. It includes many of the modules from the CPython implementations and some additional modules to integrate with the \nSymbian\n operating system. The project has been kept up-to-date to run on all variants of the S60 platform, and several third-party modules are available. The Nokia \nN900\n also supports Python with \nGTK\n widget libraries, enabling programs to be written and run on the target device.\n[104]\n\n\nCross-compilers to other languages\n[\nedit\n]\n\n\nThere are several compilers to high-level \nobject languages\n, with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language:\n\n\n\n\nJython\n compiles into Java byte code, which can then be executed by every \nJava virtual machine\n implementation. This also enables the use of Java class library functions from the Python program.\n\n\nIronPython\n follows a similar approach in order to run Python programs on the .NET \nCommon Language Runtime\n.\n\n\nThe \nRPython\n language can be compiled to \nC\n, \nJava bytecode\n, or \nCommon Intermediate Language\n, and is used to build the PyPy interpreter of Python.\n\n\nPyjs\n compiles Python to \nJavaScript\n.\n\n\nCython\n compiles Python to \nC\n and \nC++\n.\n\n\nPythran compiles Python to \nC++\n.\n\n\nSomewhat dated \nPyrex\n (latest release in 2010) and \nShed Skin\n (latest release in 2013) compile to C and C++ respectively.\n\n\nGoogle\'s Grumpy compiles Python to \nGo\n.\n\n\nNuitka\n compiles Python into C++ \n[105]\n\n\n\n\nPerformance\n[\nedit\n]\n\n\nA performance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at EuroSciPy \'13.\n[106]\n\n\nDevelopment\n[\nedit\n]\n\n\nPython\'s development is conducted largely through the \nPython Enhancement Proposal\n (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues and documenting Python design decisions.\n[107]\n Outstanding PEPs are reviewed and commented on by the Python community and Guido Van Rossum, Python\'s \nBenevolent Dictator For Life\n.\n[107]\n\n\nEnhancement of the language corresponds with development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language\'s development. Specific issues are discussed in the \nRoundup\n \nbug tracker\n maintained at python.org.\n[108]\n Development originally took place on a \nself-hosted\n source-code repository running \nMercurial\n, until Python moved to \nGitHub\n in January 2017.\n[109]\n\n\nCPython\'s public releases come in three types, distinguished by which part of the version number is incremented:\n\n\n\n\nBackward-incompatible versions, where code is expected to break and need to be manually \nported\n. The first part of the version number is incremented. These releases happen infrequently\xe2\x80\x94for example, version 3.0 was released 8 years after 2.0.\n\n\nMajor or "feature" releases, about every 18 months, are largely compatible but introduce new features. The second part of the version number is incremented. Each major version is supported by bugfixes for several years after its release.\n[110]\n\n\nBugfix releases, which introduce no new features, occur about every 3 months and are made when a sufficient number of bugs have been fixed upstream since the last release. Security vulnerabilities are also patched in these releases. The third and final part of the version number is incremented.\n[111]\n\n\n\n\nMany \nalpha, beta, and release-candidates\n are also released as previews and for testing before final releases. Although there is a rough schedule for each release, they are often delayed if the code is not ready. Python\'s development team monitors the state of the code by running the large \nunit test\n suite during development, and using the \nBuildBot\n \ncontinuous integration\n system.\n[112]\n\n\nThe community of Python developers has also contributed over 86,000\n[113]\n software modules (as of 20\xc2\xa0August\xc2\xa02016\n[update]\n) to the \nPython Package Index\n (PyPI), the official repository of third-party Python libraries.\n\n\nThe major \nacademic conference\n on Python is \nPyCon\n. There are also special Python mentoring programmes, such as \nPyladies\n.\n\n\nNaming\n[\nedit\n]\n\n\nPython\'s name is derived from the British comedy group \nMonty Python\n, whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture;\n[114]\n for example, the \nmetasyntactic variables\n often used in Python literature are \nspam\n and \neggs\n instead of the traditional \nfoo\n and \nbar\n.\n[114]\n[115]\n The official Python documentation also contains various references to Monty Python routines.\n[116]\n[117]\n\n\nThe prefix \nPy-\n is used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include \nPygame\n, a \nbinding\n of \nSDL\n to Python (commonly used to create games); \nPyQt\n and \nPyGTK\n, which bind \nQt\n and \nGTK\n to Python respectively; and \nPyPy\n, a Python implementation originally written in Python.\n\n\nUses\n[\nedit\n]\n\n\nMain article: \nList of Python software\n\n\nSince 2003, Python has consistently ranked in the top ten most popular programming languages in the \nTIOBE Programming Community Index\n where, as of January\xc2\xa02018\n[update]\n, it is the fourth most popular language (behind \nJava\n, \nC\n, and \nC++\n).\n[118]\n It was selected Programming Language of the Year in 2007 and 2010.\n[119]\n\n\nAn empirical study found that scripting languages, such as Python, are more productive than conventional languages, such as C and Java, for programming problems involving string manipulation and search in a dictionary, and determined that memory consumption was often "better than Java and not much worse than C or C++".\n[120]\n\n\nLarge organizations that use Python include \nWikipedia\n, \nGoogle\n,\n[121]\n \nYahoo!\n,\n[122]\n \nCERN\n,\n[123]\n \nNASA\n,\n[124]\n \nFacebook\n,\n[125]\n \nAmazon\n, \nInstagram\n, \nSpotify\n[\ncitation needed\n]\n and some smaller entities like \nILM\n[126]\n and \nITA\n.\n[127]\n The social news networking site \nReddit\n is written entirely in Python.\n\n\nPython can serve as a \nscripting language\n for \nweb applications\n, e.g., via \nmod_wsgi\n for the \nApache web server\n.\n[128]\n With \nWeb Server Gateway Interface\n, a standard API has evolved to facilitate these applications. \nWeb frameworks\n like \nDjango\n, \nPylons\n, \nPyramid\n, \nTurboGears\n, \nweb2py\n, \nTornado\n, \nFlask\n, \nBottle\n and \nZope\n support developers in the design and maintenance of complex applications. \nPyjs\n and \nIronPython\n can be used to develop the client-side of Ajax-based applications. \nSQLAlchemy\n can be used as \ndata mapper\n to a relational database. \nTwisted\n is a framework to program communications between computers, and is used (for example) by \nDropbox\n.\n\n\nLibraries such as \nNumPy\n, \nSciPy\n and \nMatplotlib\n allow the effective use of Python in scientific computing,\n[129]\n[130]\n with specialized libraries such as \nBiopython\n and \nAstropy\n providing domain-specific functionality. \nSageMath\n is a \nmathematical software\n with a "\nnotebook\n" programmable in Python: its library covers many aspects of \nmathematics\n, including \nalgebra\n, \ncombinatorics\n, \nnumerical mathematics\n, \nnumber theory\n, and \ncalculus\n.\n\n\nPython has been successfully embedded in many software products as a scripting language, including in \nfinite element method\n software such as \nAbaqus\n, 3D parametric modeler like \nFreeCAD\n, 3D animation packages such as \n3ds Max\n, \nBlender\n, \nCinema 4D\n, \nLightwave\n, \nHoudini\n, \nMaya\n, \nmodo\n, \nMotionBuilder\n, \nSoftimage\n, the visual effects compositor \nNuke\n, 2D imaging programs like \nGIMP\n,\n[131]\n \nInkscape\n, \nScribus\n and \nPaint Shop Pro\n,\n[132]\n and \nmusical notation\n programs like \nscorewriter\n and \ncapella\n. \nGNU Debugger\n uses Python as a \npretty printer\n to show complex structures such as C++ containers. \nEsri\n promotes Python as the best choice for writing scripts in \nArcGIS\n.\n[133]\n It has also been used in several video games,\n[134]\n[135]\n and has been adopted as first of the three available \nprogramming languages\n in \nGoogle App Engine\n, the other two being \nJava\n and \nGo\n.\n[136]\n Python is also used in \nalgorithmic trading\n and quantitative finance.\n[137]\n Python can also be implemented in APIs of online brokerages that run on other languages by using wrappers.\n[138]\n\n\nPython has been used in \nartificial intelligence\n projects.\n[139]\n[140]\n[141]\n[142]\n As a scripting language with \nmodular architecture\n, simple syntax and rich text processing tools, Python is often used for \nnatural language processing\n.\n[143]\n\n\nMany operating systems include Python as a standard component. It ships with most \nLinux distributions\n, \nAmigaOS 4\n, \nFreeBSD\n, \nNetBSD\n, \nOpenBSD\n and \nmacOS\n, and can be used from the command line (terminal). Many Linux distributions use installers written in Python: \nUbuntu\n uses the \nUbiquity\n installer, while \nRed Hat Linux\n and \nFedora\n use the \nAnaconda\n installer. \nGentoo Linux\n uses Python in its \npackage management system\n, \nPortage\n.\n\n\nPython is used extensively in the \ninformation security\n industry, including in exploit development.\n[144]\n[145]\n\n\nMost of the \nSugar\n software for the \nOne Laptop per Child\n XO, now developed at \nSugar Labs\n, is written in Python.\n[146]\n\n\nThe \nRaspberry Pi\n \nsingle-board computer\n project has adopted Python as its main user-programming language.\n\n\nLibreOffice\n includes Python, and intends to replace Java with Python. Its Python Scripting Provider is a core feature\n[147]\n since Version 4.0 from 7 February 2013.\n\n\nLanguages influenced by Python\n[\nedit\n]\n\n\nPython\'s design and philosophy have influenced many other programming languages:\n\n\n\n\nBoo\n uses indentation, a similar syntax, and a similar object model.\n[148]\n\n\nCobra\n uses indentation and a similar syntax, and its "Acknowledgements" document lists Python first among languages that influenced it.\n[149]\n However, Cobra directly supports \ndesign-by-contract\n, \nunit tests\n, and optional \nstatic typing\n.\n[150]\n\n\nCoffeeScript\n, a programming language that cross-compiles to JavaScript, has Python-inspired syntax.\n\n\nECMAScript\n borrowed \niterators\n and \ngenerators\n from Python.\n[151]\n\n\nGo\n is designed for the "speed of working in a dynamic language like Python"\n[152]\n and shares the same syntax for slicing arrays.\n\n\nGroovy\n was motivated by the desire to bring the Python design philosophy to \nJava\n.\n[153]\n\n\nJulia\n was designed "with \ntrue macros\n [.. and to be] as usable for general programming as Python [and] should be as fast as C".\n[23]\n Calling to or from Julia is possible; to with \nPyCall.jl\n and a Python package \npyjulia\n allows calling, in the other direction, from Python.\n\n\nKotlin (programming language)\n is a functional programming language with an interactive shell similar to python. However, Kotlin is strongly typed with access to standard Java libraries.\n[154]\n\n\nRuby\n\'s creator, \nYukihiro Matsumoto\n, has said: "I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That\'s why I decided to design my own language."\n[155]\n\n\nSwift\n, a programming language developed by Apple, has some Python-inspired syntax.\n[156]\n\n\nGDScript\n, dynamically typed programming language used to create video-games. It is extremely similar to Python with a few minor differences.\n\n\n\n\nPython\'s development practices have also been emulated by other languages. For example, the practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python, a PEP) is also used in \nTcl\n[157]\n and \nErlang\n.\n[158]\n\n\nPython received TIOBE\'s Programming Language of the Year awards in 2007 and 2010. The award is given to the language with the greatest growth in popularity over the year, as measured by the \nTIOBE index\n.\n[159]\n\n\nSee also\n[\nedit\n]\n\n\n\n\n\n\nFree software portal\n\n\nPython programming portal\n\n\n\n\n\n\n\n\nHistory of Python\n\n\nComparison of integrated development environments for Python\n\n\nComparison of programming languages\n\n\nList of programming languages\n\n\npip (package manager)\n\n\nOff-side rule\n\n\n\n\nReferences\n[\nedit\n]\n\n\n\n\n\n\n^ \na\n \nb\n \nGuttag, John V. (2016-08-12). \nIntroduction to Computation and Programming Using Python: With Application to Understanding Data\n. MIT Press. \nISBN\n\xc2\xa0\n978-0-262-52962-4\n.\n\xc2\xa0\n\n\n^\n \nDeily, Ned (28 March 2018). \n"Python 3.6.5 is now available"\n. \nPython Insider\n. The Python Core Developers\n. Retrieved \n29 March\n 2018\n.\n\xc2\xa0\n\n\n^\n \nPeterson, Benjamin (1 May 2018). \n"Python 2.7.15 released"\n. \nPython Insider\n. The Python Core Developers\n. Retrieved \n1 May\n 2018\n.\n\xc2\xa0\n\n\n^\n \n"Python Release Python 3.7.0b5"\n. \nPython.org\n. Retrieved \n2018-05-30\n.\n\xc2\xa0\n\n\n^\n \n"PEP 483 -- The Theory of Type Hints"\n. \nPython.org\n.\n\xc2\xa0\n\n\n^\n \nFile extension .pyo was removed in Python 3.5. See \nPEP 0488\n\n\n^\n \nHolth, Moore (30 March 2014). \n"PEP 0441 -- Improving Python ZIP Application Support"\n. Retrieved \n12 November\n 2015\n.\n\xc2\xa0\n\n\n^ \na\n \nb\n \n"Why was Python created in the first place?"\n. \nGeneral Python FAQ\n. Python Software Foundation\n. Retrieved \n22 March\n 2007\n.\n\xc2\xa0\n\n\n^\n \nKuchling, Andrew M. (22 December 2006). \n"Interview with Guido van Rossum (July 1998)"\n. \namk.ca\n. Archived from \nthe original\n on 1 May 2007\n. Retrieved \n12 March\n 2012\n.\n\xc2\xa0\n\n\n^\n \nvan Rossum, Guido (1993). \n"An Introduction to Python for UNIX/C Programmers"\n. \nProceedings of the NLUUG najaarsconferentie (Dutch UNIX users group)\n. \neven though the design of C is far from ideal, its influence on Python is considerable.\n\xc2\xa0\n\n\n^ \na\n \nb\n \n"Classes"\n. \nThe Python Tutorial\n. Python Software Foundation\n. Retrieved \n20 February\n 2012\n. \nIt is a mixture of the class mechanisms found in C++ and Modula-3\n\xc2\xa0\n\n\n^\n \nLundh, Fredrik. \n"Call By Object"\n. \neffbot.org\n. Retrieved \n21 November\n 2017\n. \nreplace "CLU" with "Python", "record" with "instance", and "procedure" with "function or method", and you get a pretty accurate description of Python\'s object model.\n\xc2\xa0\n\n\n^\n \nSimionato, Michele. \n"The Python 2.3 Method Resolution Order"\n. Python Software Foundation. \nThe C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers\n\xc2\xa0\n\n\n^\n \nKuchling, A. M. \n"Functional Programming HOWTO"\n. \nPython v2.7.2 documentation\n. Python Software Foundation\n. Retrieved \n9 February\n 2012\n.\n\xc2\xa0\n\n\n^\n \nSchemenauer, Neil; Peters, Tim; Hetland, Magnus Lie (18 May 2001). \n"PEP 255\xc2\xa0\xe2\x80\x93 Simple Generators"\n. \nPython Enhancement Proposals\n. Python Software Foundation\n. Retrieved \n9 February\n 2012\n.\n\xc2\xa0\n\n\n^\n \nSmith, Kevin D.; Jewett, Jim J.; Montanaro, Skip; Baxter, Anthony (2 September 2004). \n"PEP 318\xc2\xa0\xe2\x80\x93 Decorators for Functions and Methods"\n. \nPython Enhancement Proposals\n. Python Software Foundation\n. Retrieved \n24 February\n 2012\n.\n\xc2\xa0\n\n\n^\n \n"More Control Flow Tools"\n. \nPython 3 documentation\n. Python Software Foundation\n. Retrieved \n24 July\n 2015\n.\n\xc2\xa0\n\n\n^\n \nHubinger, Evan. \n"Coconut Programming Language"\n. \ncoconut-lang.org\n. Retrieved \n18 August\n 2017\n.\n\xc2\xa0\n\n\n^\n \n"CoffeeScript borrows chained comparisons from Python"\n.\n\xc2\xa0\n\n\n^\n \n"Genie Language - A brief guide"\n. Retrieved \n28 December\n 2015\n.\n\xc2\xa0\n\n\n^\n \n"Perl and Python influences in JavaScript"\n. \nwww.2ality.com\n. 24 February 2013\n. Retrieved \n15 May\n 2015\n.\n\xc2\xa0\n\n\n^\n \nRauschmayer, Axel. \n"Chapter 3: The Nature of JavaScript; Influences"\n. \nO\'Reilly, Speaking JavaScript\n. Retrieved \n15 May\n 2015\n.\n\xc2\xa0\n\n\n^ \na\n \nb\n \n"Why We Created Julia"\n. \nJulia website\n. February 2012\n. Retrieved \n5 June\n 2014\n.\n\xc2\xa0\n\n\n^\n \nRing Team (4 December 2017). \n"Ring and other languages"\n. \nring-lang.net\n. \nring-lang\n.\n\xc2\xa0\n\n\n^\n \nBini, Ola (2007). \nPractical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform\n. Berkeley: APress. p.\xc2\xa03. \nISBN\n\xc2\xa0\n978-1-59059-881-8\n.\n\xc2\xa0\n\n\n^\n \nLattner, Chris (3 June 2014). \n"Chris Lattner\'s Homepage"\n. Chris Lattner\n. Retrieved \n3 June\n 2014\n. \nThe Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.\n\xc2\xa0\n\n\n^\n \nKuhlman, Dave. \n"A Python Book: Beginning Python, Advanced Python, and Python Exercises"\n. Archived from \nthe original\n on 23 June 2012.\n\xc2\xa0\n\n\n^\n \n"About Python"\n. Python Software Foundation\n. Retrieved \n24 April\n 2012\n.\n\xc2\xa0\n, second section "Fans of Python use the phrase "batteries included" to describe the standard library, which covers everything from asynchronous processing to zip files."\n\n\n^\n \n"History and License"\n. Retrieved \n5 December\n 2016\n.\n\xc2\xa0\n "All Python releases are Open Source"\n\n\n^ \na\n \nb\n \nVenners, Bill (13 January 2003). \n"The Making of Python"\n. \nArtima Developer\n. Artima\n. Retrieved \n22 March\n 2007\n.\n\xc2\xa0\n\n\n^\n \nvan Rossum, Guido (20 January 2009). \n"A Brief Timeline of Python"\n. \nThe History of Python\n. Google\n. Retrieved \n20 January\n 2009\n.\n\xc2\xa0\n\n\n^\n \nvan Rossum, Guido\n (29 August 2000). \n"SETL (was: Lukewarm about range literals)"\n. \nPython-Dev\n (Mailing list)\n. Retrieved \n13 March\n 2011\n.\n\xc2\xa0\n\n\n^\n \nvan Rossum, Guido (1996). \n"Foreword for "Programming Python" (1st ed.)"\n. Retrieved \n10 July\n 2014\n.\n\xc2\xa0\n\n\n^\n \nKuchling, A. M.; Zadka, Moshe (16 October 2000). \n"What\'s New in Python 2.0"\n. Python Software Foundation\n. Retrieved \n11 February\n 2012\n.\n\xc2\xa0\n\n\n^\n \n"Python 3.0 Release"\n. Python Software Foundation\n. Retrieved \n8 July\n 2009\n.\n\xc2\xa0\n\n\n^\n \nvan Rossum, Guido (5 April 2006). \n"PEP 3000\xc2\xa0\xe2\x80\x93 Python 3000"\n. \nPython Enhancement Proposals\n. Python Software Foundation\n. Retrieved \n27 June\n 2009\n.\n\xc2\xa0\n\n\n^\n \n"Automated Python 2 to 3 code translation \xe2\x80\x94 Python Documentation"\n. Retrieved \n11 February\n 2018\n.\n\xc2\xa0\n\n\n^\n \n"PEP 373 -- Python 2.7 Release Schedule"\n. \npython.org\n. Retrieved \n9 January\n 2017\n.\n\xc2\xa0\n\n\n^\n \n"PEP 466 -- Network Security Enhancements for Python 2.7.x"\n. \npython.org\n. Retrieved \n9 January\n 2017\n.\n\xc2\xa0\n\n\n^\n \n"Google Open Source Blog: Grumpy: Go running Python!"\n. 4 January 2017\n. Retrieved \n7 March\n 2017\n.\n\xc2\xa0\n\n\n^\n \nThe Cain Gang Ltd. \n"Python Metaclasses: Who? Why? When?"\n \n(PDF)\n. Archived from \nthe original\n \n(PDF)\n on 10 December 2009\n. Retrieved \n27 June\n 2009\n.\n\xc2\xa0\n\n\n^\n \n"3.3. Special method names"\n. \nThe Python Language Reference\n. Python Software Foundation\n. Retrieved \n27 June\n 2009\n.\n\xc2\xa0\n\n\n^\n \n"PyDBC: method preconditions, method postconditions and class invariants for Python"\n. Retrieved \n24 September\n 2011\n.\n\xc2\xa0\n\n\n^\n \n"Contracts for Python"\n. Retrieved \n24 September\n 2011\n.\n\xc2\xa0\n\n\n^\n \n"PyDatalog"\n. Retrieved \n22 July\n 2012\n.\n\xc2\xa0\n\n\n^ \na\n \nb\n \nHettinger, Raymond (30 January 2002). \n"PEP 289\xc2\xa0\xe2\x80\x93 Generator Expressions"\n. \nPython Enhancement Proposals\n. Python Software Foundation\n. Retrieved \n19 February\n 2012\n.\n\xc2\xa0\n\n\n^\n \n"6.5 itertools\xc2\xa0\xe2\x80\x93 Functions creating iterators for efficient looping"\n. Docs.python.org\n. Retrieved \n22 November\n 2016\n.\n\xc2\xa0\n\n\n^ \na\n \nb\n \nPeters, Tim (19 August 2004). \n"PEP 20\xc2\xa0\xe2\x80\x93 The Zen of Python"\n. \nPython Enhancement Proposals\n. Python Software Foundation\n. Retrieved \n24 November\n 2008\n.\n\xc2\xa0\n\n\n^\n \nMartelli, Alex; Ravenscroft, Anna; Ascher, David (2005). \nPython Cookbook, 2nd Edition\n. \nO\'Reilly Media\n. p.\xc2\xa0230. \nISBN\n\xc2\xa0\n978-0-596-00797-3\n.\n\xc2\xa0\n\n\n^\n \n"Python Culture"\n.\n\xc2\xa0\n\n\n^\n \n"General Python FAQ"\n. \nPython v2.7.3 documentation\n. Docs.python.org\n. Retrieved \n3 December\n 2012\n.\n\xc2\xa0\n\n\n^\n \n"15 Ways Python Is a Powerful Force on the Web"\n.\n\xc2\xa0\n\n\n^\n \n"pprint - Data pretty printer - Python Documentation"\n.\n\xc2\xa0\n\n\n^\n \nGoodger, David. \n"Code Like a Pythonista: Idiomatic Python"\n.\n\xc2\xa0\n\n\n^\n \n"How to think like a Pythonista"\n.\n\xc2\xa0\n\n\n^\n \n"Is Python a good language for beginning programmers?"\n. \nGeneral Python FAQ\n. Python Software Foundation\n. Retrieved \n21 March\n 2007\n.\n\xc2\xa0\n\n\n^\n \n"Myths about indentation in Python"\n. Secnetix.de\n. Retrieved \n19 April\n 2011\n.\n\xc2\xa0\n\n\n^\n \n"Python 2.5 Release"\n. \nPython.org\n.\n\xc2\xa0\n\n\n^\n \n"Highlights: Python 2.5"\n. \nPython.org\n.\n\xc2\xa0\n\n\n^\n \nSweigart, Al (2010). "Appendix A: Differences Between Python 2 and 3". \nInvent Your Own Computer Games with Python\n (2 ed.). \nISBN\n\xc2\xa0\n978-0-9821060-1-3\n. Retrieved \n20 February\n 2014\n.\n\xc2\xa0\n\n\n^\n \nvan Rossum, Guido (22 April 2009). \n"Tail Recursion Elimination"\n. Neopythonic.blogspot.be\n. Retrieved \n3 December\n 2012\n.\n\xc2\xa0\n\n\n^\n \nvan Rossum, Guido (9 February 2006). \n"Language Design Is Not Just Solving Puzzles"\n. \nArtima forums\n. Artima\n. Retrieved \n21 March\n 2007\n.\n\xc2\xa0\n\n\n^\n \nvan Rossum, Guido; Eby, Phillip J. (10 May 2005). \n"PEP 342\xc2\xa0\xe2\x80\x93 Coroutines via Enhanced Generators"\n. \nPython Enhancement Proposals\n. Python Software Foundation\n. Retrieved \n19 February\n 2012\n.\n\xc2\xa0\n\n\n^\n \n"PEP 380"\n. Python.org\n. Retrieved \n3 December\n 2012\n.\n\xc2\xa0\n\n\n^\n \n"division"\n. \npython.org\n.\n\xc2\xa0\n\n\n^\n \n"PEP 0465 -- A dedicated infix operator for matrix multiplication"\n. \npython.org\n. Retrieved \n1 January\n 2016\n.\n\xc2\xa0\n\n\n^\n \n"Python 3.5.1 Release and Changelog"\n. \npython.org\n. Retrieved \n1 January\n 2016\n.\n\xc2\xa0\n\n\n^\n \n"Chapter 15. Expressions - 15.21.1. Numerical Equality Operators == and\xc2\xa0!="\n. \nOracle Corporation\n. Retrieved \n28 August\n 2016\n.\n\xc2\xa0\n\n\n^\n \n"Chapter 15. Expressions - 15.21.3. Reference Equality Operators == and\xc2\xa0!="\n. Oracle Corporation\n. Retrieved \n28 August\n 2016\n.\n\xc2\xa0\n\n\n^\n \nvan Rossum, Guido; Hettinger, Raymond (7 February 2003). \n"PEP 308\xc2\xa0\xe2\x80\x93 Conditional Expressions"\n. \nPython Enhancement Proposals\n. Python Software Foundation\n. Retrieved \n13 July\n 2011\n.\n\xc2\xa0\n\n\n^\n \n"4. Built-in Types \xe2\x80\x94 Python 3.6.3rc1 documentation"\n. \npython.org\n. Retrieved \n1 October\n 2017\n.\n\xc2\xa0\n\n\n^ \na\n \nb\n \n"PEP 498 -- Literal String Interpolation"\n. \npython.org\n. Retrieved \n8 March\n 2017\n.\n\xc2\xa0\n\n\n^\n \n"Why must \'self\' be used explicitly in method definitions and calls?"\n. \nDesign and History FAQ\n. Python Software Foundation\n. Retrieved \n19 February\n 2012\n.\n\xc2\xa0\n\n\n^\n \n"The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1"\n. Retrieved \n12 January\n 2011\n.\n\xc2\xa0\n\n\n^\n \n"Type hinting for Python"\n. LWN.net. 24 December 2014\n. Retrieved \n5 May\n 2015\n.\n\xc2\xa0\n\n\n^\n \n"mypy - Optional Static Typing for Python"\n. Retrieved \n28 January\n 2017\n.\n\xc2\xa0\n\n\n^\n \nZadka, Moshe; van Rossum, Guido (11 March 2001). \n"PEP 237\xc2\xa0\xe2\x80\x93 Unifying Long Integers and Integers"\n. \nPython Enhancement Proposals\n. Python Software Foundation\n. Retrieved \n24 September\n 2011\n.\n\xc2\xa0\n\n\n^\n \n"PEP 465 -- A dedicated infix operator for matrix multiplication"\n. \npython.org\n.\n\xc2\xa0\n\n\n^\n \n"The tilde operator in Python - Stackoverflow"\n. \nstackoverflow.com\n.\n\xc2\xa0\n\n\n^\n \n"BitwiseOperators - Python Wiki"\n. \nwiki.python.org\n.\n\xc2\xa0\n\n\n^\n \nZadka, Moshe; van Rossum, Guido (11 March 2001). \n"PEP 238\xc2\xa0\xe2\x80\x93 Changing the Division Operator"\n. \nPython Enhancement Proposals\n. Python Software Foundation\n. Retrieved \n23 October\n 2013\n.\n\xc2\xa0\n\n\n^\n \n"Why Python\'s Integer Division Floors"\n. Retrieved \n25 August\n 2010\n.\n\xc2\xa0\n\n\n^\n \n"round"\n, \nThe Python standard library, release 2.7, \xc2\xa72: Built-in functions\n, retrieved \n14 August\n 2011\n\xc2\xa0\n\n\n^\n \n"round"\n, \nThe Python standard library, release 3.2, \xc2\xa72: Built-in functions\n, retrieved \n14 August\n 2011\n\xc2\xa0\n\n\n^\n \nBeazley, David M. (2009). \nPython Essential Reference\n (4th ed.). p.\xc2\xa066.\n\xc2\xa0\n\n\n^\n \nKernighan, Brian W.; Ritchie, Dennis M. (1988). \nThe C Programming Language\n (2nd ed.). p.\xc2\xa0206.\n\xc2\xa0\n\n\n^\n \n"Built-in Type"\n. \ndocs.python.org\n.\n\xc2\xa0\n\n\n^\n \nBatista, Facundo. \n"PEP 0327 -- Decimal Data Type"\n. \nPython.org\n. Retrieved \n26 September\n 2015\n.\n\xc2\xa0\n\n\n^\n \n"What\'s New in Python 2.6 \xe2\x80\x94 Python v2.6.9 documentation"\n. \ndocs.python.org\n. Retrieved \n26 September\n 2015\n.\n\xc2\xa0\n\n\n^\n \nPiotrowski, Przemyslaw (July 2006). \n"Build a Rapid Web Development Environment for Python Server Pages and Oracle"\n. \nOracle Technology Network\n. Oracle\n. Retrieved \n12 March\n 2012\n.\n\xc2\xa0\n\n\n^\n \nBatista, Facundo (17 October 2003). \n"PEP 327\xc2\xa0\xe2\x80\x93 Decimal Data Type"\n. \nPython Enhancement Proposals\n. Python Software Foundation\n. Retrieved \n24 November\n 2008\n.\n\xc2\xa0\n\n\n^\n \nEby, Phillip J. (7 December 2003). \n"PEP 333\xc2\xa0\xe2\x80\x93 Python Web Server Gateway Interface v1.0"\n. \nPython Enhancement Proposals\n. Python Software Foundation\n. Retrieved \n19 February\n 2012\n.\n\xc2\xa0\n\n\n^\n \nDebill, Erik. \n"Module Counts"\n. \nModuleCounts\n. Retrieved \n20 September\n 2017\n.\n\xc2\xa0\n\n\n^\n \n"20+ Python Web Scraping Examples (Beautiful Soup & Selenium) - Like Geeks"\n. \nlikegeeks.com\n. 5 December 2017\n. Retrieved \n12 March\n 2018\n.\n\xc2\xa0\n\n\n^\n \nEnthought, Canopy. \n"Canopy"\n. \nwww.enthought.com\n. Retrieved \n20 August\n 2016\n.\n\xc2\xa0\n\n\n^\n \nvan Rossum, Guido (5 June 2001). \n"PEP 7\xc2\xa0\xe2\x80\x93 Style Guide for C Code"\n. \nPython Enhancement Proposals\n. Python Software Foundation\n. Retrieved \n24 November\n 2008\n.\n\xc2\xa0\n\n\n^\n \n"CPython byte code"\n. Docs.python.org\n. Retrieved \n16 February\n 2016\n.\n\xc2\xa0\n\n\n^\n \n"Python 2.5 internals"\n \n(PDF)\n. Retrieved \n19 April\n 2011\n.\n\xc2\xa0\n\n\n^\n \n"An Interview with Guido van Rossum"\n. Oreilly.com\n. Retrieved \n24 November\n 2008\n.\n\xc2\xa0\n\n\n^\n \n"PyPy compatibility"\n. Pypy.org\n. Retrieved \n3 December\n 2012\n.\n\xc2\xa0\n\n\n^\n \n"speed comparison between CPython and Pypy"\n. Speed.pypy.org\n. Retrieved \n3 December\n 2012\n.\n\xc2\xa0\n\n\n^\n \n"Application-level Stackless features \xe2\x80\x94 PyPy 2.0.2 documentation"\n. Doc.pypy.org\n. Retrieved \n17 July\n 2013\n.\n\xc2\xa0\n\n\n^\n \n"Plans for optimizing Python"\n. \nGoogle Project Hosting\n. Google. 15 December 2009\n. Retrieved \n24 September\n 2011\n.\n\xc2\xa0\n\n\n^\n \n"Python on the Nokia N900"\n. \nStochastic Geometry\n.\n\xc2\xa0\n\n\n^\n \n"Nuitka Home | Nuitka Home"\n. \nnuitka.net\n. Retrieved \n18 August\n 2017\n.\n\xc2\xa0\n\n\n^\n \nMurri, Riccardo (2013). \nPerformance of Python runtimes on a non-numeric scientific code\n. European Conference on Python in Science (EuroSciPy). \narXiv\n:\n1404.6388\n\xe2\x80\xaf\n. \nBibcode\n:\n2014arXiv1404.6388M\n.\n\xc2\xa0\n\n\n^ \na\n \nb\n \nWarsaw, Barry; Hylton, Jeremy; Goodger, David (13 June 2000). \n"PEP 1\xc2\xa0\xe2\x80\x93 PEP Purpose and Guidelines"\n. \nPython Enhancement Proposals\n. Python Software Foundation\n. Retrieved \n19 April\n 2011\n.\n\xc2\xa0\n\n\n^\n \nCannon, Brett. \n"Guido, Some Guys, and a Mailing List: How Python is Developed"\n. \npython.org\n. Python Software Foundation. Archived from \nthe original\n on 1 June 2009\n. Retrieved \n27 June\n 2009\n.\n\xc2\xa0\n\n\n^\n \n"Python Developer\'s Guide"\n.\n\xc2\xa0\n\n\n^\n \nNorwitz, Neal (8 April 2002). \n"[Python-Dev] Release Schedules (was Stability & change)"\n. Retrieved \n27 June\n 2009\n.\n\xc2\xa0\n\n\n^\n \nAahz; Baxter, Anthony (15 March 2001). \n"PEP 6\xc2\xa0\xe2\x80\x93 Bug Fix Releases"\n. \nPython Enhancement Proposals\n. Python Software Foundation\n. Retrieved \n27 June\n 2009\n.\n\xc2\xa0\n\n\n^\n \n"Python Buildbot"\n. \nPython Developer\xe2\x80\x99s Guide\n. Python Software Foundation\n. Retrieved \n24 September\n 2011\n.\n\xc2\xa0\n\n\n^\n \nDeBill, Erik. \n"Module Counts"\n. \nwww.modulecounts.com\n. Retrieved \n20 August\n 2016\n.\n\xc2\xa0\n\n\n^ \na\n \nb\n \n"Whetting Your Appetite"\n. \nThe Python Tutorial\n. Python Software Foundation\n. Retrieved \n20 February\n 2012\n.\n\xc2\xa0\n\n\n^\n \n"In Python, should I use else after a return in an if block?"\n. \nStack Overflow\n. Stack Exchange. 17 February 2011\n. Retrieved \n6 May\n 2011\n.\n\xc2\xa0\n\n\n^\n \nLutz, Mark (2009). \nLearning Python: Powerful Object-Oriented Programming\n. O\'Reilly Media, Inc. p.\xc2\xa017. \nISBN\n\xc2\xa0\n9781449379322\n.\n\xc2\xa0\n\n\n^\n \nFehily, Chris (2002). \nPython\n. Peachpit Press. p.\xc2\xa0xv. \nISBN\n\xc2\xa0\n9780201748840\n.\n\xc2\xa0\n\n\n^\n \n"TIOBE Index"\n. TIOBE - The Software Quality Company\n. Retrieved \n7 March\n 2017\n.\n\xc2\xa0\n\n\n^\n \nTIOBE Software Index (2015). \n"TIOBE Programming Community Index Python"\n. Retrieved \n10 September\n 2015\n.\n\xc2\xa0\n\n\n^\n \nPrechelt, Lutz (14 March 2000). \n"An empirical comparison of C, C++, Java, Perl, Python, Rexx, and Tcl"\n \n(PDF)\n. Retrieved \n30 August\n 2013\n.\n\xc2\xa0\n\n\n^\n \n"Quotes about Python"\n. Python Software Foundation\n. Retrieved \n8 January\n 2012\n.\n\xc2\xa0\n\n\n^\n \n"Organizations Using Python"\n. Python Software Foundation\n. Retrieved \n15 January\n 2009\n.\n\xc2\xa0\n\n\n^\n \n"Python\xc2\xa0: the holy grail of programming"\n. \nCERN Bulletin\n. CERN Publications (31/2006). 31 July 2006\n. Retrieved \n11 February\n 2012\n.\n\xc2\xa0\n\n\n^\n \nShafer, Daniel G. (17 January 2003). \n"Python Streamlines Space Shuttle Mission Design"\n. Python Software Foundation\n. Retrieved \n24 November\n 2008\n.\n\xc2\xa0\n\n\n^\n \n"Tornado: Facebook\'s Real-Time Web Framework for Python - Facebook for Developers"\n. \nFacebook for Developers\n. Retrieved \n2018-06-19\n.\n\xc2\xa0\n\n\n^\n \nFortenberry, Tim (17 January 2003). \n"Industrial Light & Magic Runs on Python"\n. Python Software Foundation\n. Retrieved \n11 February\n 2012\n.\n\xc2\xa0\n\n\n^\n \nTaft, Darryl K. (5 March 2007). \n"Python Slithers into Systems"\n. \neWeek.com\n. Ziff Davis Holdings\n. Retrieved \n24 September\n 2011\n.\n\xc2\xa0\n\n\n^\n \n"Usage statistics and market share of Python for websites"\n. 2012\n. Retrieved \n18 December\n 2012\n.\n\xc2\xa0\n\n\n^\n \nOliphant, Travis (2007). \n"Python for Scientific Computing"\n. \nComputing in Science and Engineering\n.\n\xc2\xa0\n\n\n^\n \nMillman, K. Jarrod; Aivazis, Michael (2011). \n"Python for Scientists and Engineers"\n. \nComputing in Science and Engineering\n. \n13\n (2): 9\xe2\x80\x9312.\n\xc2\xa0\n\n\n^\n \n"Installers for GIMP for Windows - Frequently Asked Questions"\n. 26 July 2013. Archived from \nthe original\n on 17 July 2013\n. Retrieved \n26 July\n 2013\n.\n\xc2\xa0\n\n\n^\n \n"jasc psp9components"\n. Archived from \nthe original\n on 19 March 2008.\n\xc2\xa0\n\n\n^\n \n"About getting started with writing geoprocessing scripts"\n. \nArcGIS Desktop Help 9.2\n. Environmental Systems Research Institute. 17 November 2006\n. Retrieved \n11 February\n 2012\n.\n\xc2\xa0\n\n\n^\n \nCCP porkbelly (24 August 2010). \n"Stackless Python 2.7"\n. \nEVE Community Dev Blogs\n. \nCCP Games\n. \nAs you may know, EVE has at its core the programming language known as Stackless Python.\n\xc2\xa0\n\n\n^\n \nCaudill, Barry (20 September 2005). \n"Modding Sid Meier\'s Civilization IV"\n. \nSid Meier\'s Civilization IV Developer Blog\n. \nFiraxis Games\n. Archived from \nthe original\n on 11 August 2010. \nwe created three levels of tools ... The next level offers Python and XML support, letting modders with more experience manipulate the game world and everything in it.\n\xc2\xa0\n\n\n^\n \n"Python Language Guide (v1.0)"\n. \nGoogle Documents List Data API v1.0\n. Google. Archived from \nthe original\n on 11 August 2010.\n\xc2\xa0\n\n\n^\n \n"Python - Best Programming Language for Algorithmic Trading Systems"\n. 9 March 2016\n. Retrieved \n3 October\n 2016\n.\n\xc2\xa0\n\n\n^\n \n"Trading with Interactive Brokers using Python: An IBPy Tutorial"\n. 19 September 2016\n. Retrieved \n3 October\n 2016\n.\n\xc2\xa0\n\n\n^\n \n"Python for Artificial Intelligence"\n. Wiki.python.org. 19 July 2012. Archived from \nthe original\n on 1 November 2012\n. Retrieved \n3 December\n 2012\n.\n\xc2\xa0\n\n\n^\n \nPaine, Jocelyn, ed. (August 2005). \n"AI in Python"\n. \nAI Expert Newsletter\n. Amzi!\n. Retrieved \n11 February\n 2012\n.\n\xc2\xa0\n\n\n^\n \n"PyAIML 0.8.5\xc2\xa0: Python Package Index"\n. Pypi.python.org\n. Retrieved \n17 July\n 2013\n.\n\xc2\xa0\n\n\n^\n \nRussell, Stuart J.\n & \nNorvig, Peter\n (2009). \nArtificial Intelligence: A Modern Approach\n (3rd ed.). Upper Saddle River, NJ: Prentice Hall. p.\xc2\xa01062. \nISBN\n\xc2\xa0\n978-0-13-604259-4\n. Retrieved \n11 February\n 2012\n.\n\xc2\xa0\n\n\n^\n \n"Natural Language Toolkit"\n.\n\xc2\xa0\n\n\n^\n \n"Immunity: Knowing You\'re Secure"\n. Archived from \nthe original\n on 16 February 2009.\n\xc2\xa0\n\n\n^\n \n"Corelabs site"\n.\n\xc2\xa0\n\n\n^\n \n"What is Sugar?"\n. Sugar Labs\n. Retrieved \n11 February\n 2012\n.\n\xc2\xa0\n\n\n^\n \n"4.0 New Features and Fixes"\n. \nLibreOffice.org\n. \nThe Document Foundation\n. 2013\n. Retrieved \n25 February\n 2013\n.\n\xc2\xa0\n\n\n^\n \n"Gotchas for Python Users"\n. \nboo.codehaus.org\n. Codehaus Foundation. Archived from \nthe original\n on 11 December 2008\n. Retrieved \n24 November\n 2008\n.\n\xc2\xa0\n\n\n^\n \nEsterbrook, Charles. \n"Acknowledgements"\n. \ncobra-language.com\n. Cobra Language\n. Retrieved \n7 April\n 2010\n.\n\xc2\xa0\n\n\n^\n \nEsterbrook, Charles. \n"Comparison to Python"\n. \ncobra-language.com\n. Cobra Language\n. Retrieved \n7 April\n 2010\n.\n\xc2\xa0\n\n\n^\n \n"Proposals: iterators and generators [ES4 Wiki]"\n. wiki.ecmascript.org. Archived from \nthe original\n on 20 October 2007\n. Retrieved \n24 November\n 2008\n.\n\xc2\xa0\n\n\n^\n \nKincaid, Jason (10 November 2009). \n"Google\'s Go: A New Programming Language That\'s Python Meets C++"\n. TechCrunch\n. Retrieved \n29 January\n 2010\n.\n\xc2\xa0\n\n\n^\n \nStrachan, James (29 August 2003). \n"Groovy\xc2\xa0\xe2\x80\x93 the birth of a new dynamic language for the Java platform"\n.\n\xc2\xa0\n\n\n^\n \n"Working with the Command Line Compiler - Kotlin Programming Language"\n. \nKotlin\n. Retrieved \n12 March\n 2018\n.\n\xc2\xa0\n\n\n^\n \n"An Interview with the Creator of Ruby"\n. Linuxdevcenter.com\n. Retrieved \n3 December\n 2012\n.\n\xc2\xa0\n\n\n^\n \nLattner, Chris\n (3 June 2014). \n"Chris Lattner\'s Homepage"\n. Chris Lattner\n. Retrieved \n3 June\n 2014\n. \nI started work on the Swift Programming Language in July of 2010. I implemented much of the basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.\n\xc2\xa0\n\n\n^\n \nKupries, Andreas; Fellows, Donal K. (14 September 2000). \n"TIP #3: TIP Format"\n. \ntcl.tk\n. Tcl Developer Xchange\n. Retrieved \n24 November\n 2008\n.\n\xc2\xa0\n\n\n^\n \nGustafsson, Per; Niskanen, Raimo (29 January 2007). \n"EEP 1: EEP Purpose and Guidelines"\n. erlang.org\n. Retrieved \n19 April\n 2011\n.\n\xc2\xa0\n\n\n^\n \n"TIOBE Programming Community Index for March 2012"\n. TIOBE Software. March 2012\n. Retrieved \n25 March\n 2012\n.\n\xc2\xa0\n\n\n\n\n\n\nFurther reading\n[\nedit\n]\n\n\n\n\nDowney, Allen B. (May 2012). \nThink Python: How to Think Like a Computer Scientist\n (Version 1.6.6 ed.). \nISBN\n\xc2\xa0\n978-0-521-72596-5\n.\n\xc2\xa0\n\n\nHamilton, Naomi (5 August 2008). \n"The A-Z of Programming Languages: Python"\n. \nComputerworld\n. Archived from \nthe original\n on 29 December 2008\n. Retrieved \n31 March\n 2010\n.\n\xc2\xa0\n\n\nLutz, Mark (2013). \nLearning Python\n (5th ed.). O\'Reilly Media. \nISBN\n\xc2\xa0\n978-0-596-15806-4\n.\n\xc2\xa0\n\n\nPilgrim, Mark (2004). \nDive Into Python\n. Apress. \nISBN\n\xc2\xa0\n978-1-59059-356-1\n.\n\xc2\xa0\n\n\nPilgrim, Mark (2009). \nDive Into Python 3\n. Apress. \nISBN\n\xc2\xa0\n978-1-4302-2415-0\n. Archived from \nthe original\n on 2011-10-17.\n\xc2\xa0\n\n\nSummerfield, Mark (2009). \nProgramming in Python 3\n (2nd ed.). Addison-Wesley Professional. \nISBN\n\xc2\xa0\n978-0-321-68056-3\n.\n\xc2\xa0\n\n\n\n\nExternal links\n[\nedit\n]\n\n\n\n\nFind more about\nPython (programming language)\nat Wikipedia\'s \nsister projects\n\n\n\n\nMedia\n from Wikimedia Commons\n\n\nQuotations\n from Wikiquote\n\n\nTextbooks\n from Wikibooks\n\n\nLearning resources\n from Wikiversity\n\n\n\n\n\n\n\n\nOfficial website\n\n\nPython\n at Curlie (based on \nDMOZ\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nv\n\n\nt\n\n\ne\n\n\n\n\n\n\nProgramming languages\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nComparison\n\n\nTimeline\n\n\nHistory\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAPL\n\n\nAssembly\n\n\nBASIC\n\n\nC\n\n\nC++\n\n\nC#\n\n\nCOBOL\n\n\nFortran\n\n\nGo\n\n\nGroovy\n\n\nHaskell\n\n\nJava\n\n\nJavaScript\n (JS)\n\n\nLisp\n\n\nLua\n\n\nObjective-C\n\n\nPascal\n\n\nPerl\n\n\nPHP\n\n\nPython\n\n\nRuby\n\n\nShell\n\n\nSmalltalk\n\n\nSwift\n\n\nVisual Basic .NET\n (VB.NET)\n\n\nmore...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nCategory\n\n\n \nLists\n\n\n\n\nAlphabetical\n\n\nCategorical\n\n\nGenerational\n\n\nNon-English-based\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nv\n\n\nt\n\n\ne\n\n\n\n\n\n\nPython\n\n\n\n\n\n\n\n\nImplementations\n\n\n\n\n\n\n\n\nCircuitPython\n\n\nCLPython\n\n\nCPython\n\n\nCython\n\n\nMicroPython\n\n\nNumba\n\n\nIronPython\n\n\nJython\n\n\nPsyco\n\n\nPyPy\n\n\nPython for S60\n\n\nShed Skin\n\n\nStackless Python\n\n\nUnladen Swallow\n\n\nmore\n...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIDE\n\n\n\n\n\n\n\n\nBoa\n\n\nEric Python IDE\n\n\nIDLE\n\n\nPyDev\n\n\nSPE\n\n\nNinja-IDE\n\n\nmore\n...\n\n\n\n\n\n\n\n\n\n\n\n\nTopics\n\n\n\n\n\n\n\n\nWSGI\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsoftware (list)\n\n\nPython Software Foundation\n\n\nPyCon\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nv\n\n\nt\n\n\ne\n\n\n\n\n\n\nPython\n \nweb frameworks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlueBream\n\n\nBottle\n\n\nCherryPy\n\n\nDjango\n\n\nFlask\n\n\nGrok\n\n\nNagare\n\n\nNevow\n\n\nPyjs\n\n\nPylons\n\n\nPyramid\n\n\nQuixote\n\n\nSpyce\n\n\nTACTIC\n\n\nTornado\n\n\nTurboGears\n\n\nTwistedWeb\n\n\nWebware\n\n\nweb2py\n\n\nZope 2\n\n\nmore\n...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nv\n\n\nt\n\n\ne\n\n\n\n\n\n\nFree and open-source software\n\n\n\n\n\n\n\n\nGeneral\n\n\n\n\n\n\n\n\nAlternative terms for free software\n\n\nComparison of open-source and closed-source software\n\n\nComparison of source code hosting facilities\n\n\nFree software\n\n\nFree software project directories\n\n\nGratis versus libre\n\n\nLong-term support\n\n\nOpen-source software\n\n\nOpen-source software development\n\n\nOutline\n\n\n\n\n\n\n\n\n\n\n\n\nSoftware\n\npackages\n\n\n\n\n\n\n\n\nAudio\n\n\nBioinformatics\n\n\nCodecs\n\n\nCollaboration\n\n\nConfiguration management\n\n\nDevice drivers\n\n\n\n\nGraphics\n\n\nWireless\n\n\n\n\n\n\nGeophysics\n\n\nHealth\n\n\nMathematics\n\n\nOperating systems\n\n\nProgramming languages\n\n\nRouting\n\n\nStatistics\n\n\nTelevision\n\n\nVideo games\n\n\nWeb applications\n\n\n\n\nContent management systems\n\n\nE-commerce\n\n\n\n\n\n\nWord processors\n\n\nAndroid apps\n\n\niOS apps\n\n\nCommercial\n\n\nTrademarked\n\n\nFormerly proprietary\n\n\n\n\n\n\n\n\n\n\n\n\nCommunity\n\n\n\n\n\n\n\n\nFree software movement\n\n\nHistory\n\n\nOpen-source software movement\n\n\nOrganizations\n\n\nEvents\n\n\n\n\n\n\n\n\n\n\n\n\nLicenses\n\n\n\n\n\n\n\n\nAFL\n\n\nApache\n\n\nAPSL\n\n\nArtistic\n\n\nBeerware\n\n\nBoost\n\n\nBSD\n\n\nCC0\n\n\nCDDL\n\n\nEPL\n\n\nFree Software Foundation\n\n\n\n\nGNU GPL\n\n\nGNU LGPL\n\n\n\n\n\n\nISC\n\n\nMIT\n\n\nMPL\n\n\nMs-PL/RL\n\n\nPython\n\n\nPython Software Foundation License\n\n\nSleepycat\n\n\nUnlicense\n\n\nWTFPL\n\n\nzlib\n\n\n\n\n\n\n\n\n\n\nTypes and\n\nstandards\n\n\n\n\n\n\n\n\nComparison of free and open-source software licenses\n\n\nContributor License Agreement\n\n\nCopyleft\n\n\nDebian Free Software Guidelines\n\n\nDefinition of Free Cultural Works\n\n\nFree license\n\n\nThe Free Software Definition\n\n\nThe Open Source Definition\n\n\nOpen-source license\n\n\nPermissive software licence\n\n\nPublic domain\n\n\nViral license\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChallenges\n\n\n\n\n\n\n\n\nBinary blob\n\n\nDigital rights management\n\n\nHardware restrictions\n\n\nLicense proliferation\n\n\nMozilla software rebranding\n\n\nProprietary software\n\n\nSCO/Linux controversies\n\n\nSecure boot\n\n\nSoftware patents\n\n\nSoftware security\n\n\nTrusted Computing\n\n\n\n\n\n\n\n\n\n\n\n\nRelated topics\n\n\n\n\n\n\n\n\nGNU Manifesto\n\n\nThe Cathedral and the Bazaar\n\n\nForking\n\n\nMicrosoft Open Specification Promise\n\n\nOpen-source hardware\n\n\nRevolution OS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nBook\n\n\n \nCategory\n\n\n \nCommons\n\n\n \nPortal\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAuthority control\n\n\n\n\n\n\n\n\nBNF\n: \ncb13560465c\n \n(data)\n\n\nGND\n: \n4434275-5\n\n\nLCCN\n: \nsh96008834\n\n\nSUDOC\n: \n051626225\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\t\t\t\t\t\tRetrieved from "\nhttps://en.wikipedia.org/w/index.php?title=Python_(programming_language)&oldid=847572033\n"\t\t\t\t\t\n\n\nCategories\n: \nProgramming languages\nClass-based programming languages\nComputational notebook\nComputer science in the Netherlands\nCross-platform free software\nDutch inventions\nDynamically typed programming languages\nEducational programming languages\nHigh-level programming languages\nInformation technology in the Netherlands\nObject-oriented programming languages\nProgramming languages created in 1991\nPython (programming language)\nScripting languages\nText-oriented programming languages\nCross-platform software\nHidden categories: \nAll articles with unsourced statements\nArticles with unsourced statements from October 2017\nWikipedia articles needing clarification from May 2018\nArticles with unsourced statements from May 2018\nArticles containing potentially dated statements from March 2018\nAll articles containing potentially dated statements\nArticles containing potentially dated statements from August 2016\nArticles containing potentially dated statements from January 2018\nArticles with unsourced statements from March 2018\nArticles with Curlie links\nWikipedia articles with BNF identifiers\nWikipedia articles with GND identifiers\nWikipedia articles with LCCN identifiers\nWikipedia articles with SUDOC identifiers\nGood articles\nUse dmy dates from August 2015\n \n\n\n\n\n\n\n\n\nNavigation menu\n\n\n\n\n\n\nPersonal tools\n\n\n\n\nNot logged in\nTalk\nContributions\nCreate account\nLog in\n \n\n\n\n\n\n\n\n\nNamespaces\n\n\n\n\nArticle\nTalk\n \n\n\n\n\n\n\n\n\n\n\nVariants\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nViews\n\n\n\n\nRead\nEdit\nView history\n \n\n\n\n\n\n\n\n\nMore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSearch\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNavigation\n\n\n\n\n\n\nMain page\nContents\nFeatured content\nCurrent events\nRandom article\nDonate to Wikipedia\nWikipedia store\n \n\n\n\n\n\n\n\n\nInteraction\n\n\n\n\n\n\nHelp\nAbout Wikipedia\nCommunity portal\nRecent changes\nContact page\n \n\n\n\n\n\n\n\n\nTools\n\n\n\n\n\n\nWhat links here\nRelated changes\nUpload file\nSpecial pages\nPermanent link\nPage information\nWikidata item\nCite this page\n \n\n\n\n\n\n\n\n\nPrint/export\n\n\n\n\n\n\nCreate a book\nDownload as PDF\nPrintable version\n \n\n\n\n\n\n\n\n\nIn other projects\n\n\n\n\n\n\nWikimedia Commons\nWikibooks\nWikiquote\nWikiversity\n \n\n\n\n\n\n\n\n\nLanguages\n\n\n\n\n\n\nAfrikaans\nAlemannisch\n\xd8\xa7\xd9\x84\xd8\xb9\xd8\xb1\xd8\xa8\xd9\x8a\xd8\xa9\nAragon\xc3\xa9s\n\xe0\xa6\x85\xe0\xa6\xb8\xe0\xa6\xae\xe0\xa7\x80\xe0\xa6\xaf\xe0\xa6\xbc\xe0\xa6\xbe\nAsturianu\nAz\xc9\x99rbaycanca\n\xd8\xaa\xdb\x86\xd8\xb1\xda\xa9\xd8\xac\xd9\x87\n\xe0\xa6\xac\xe0\xa6\xbe\xe0\xa6\x82\xe0\xa6\xb2\xe0\xa6\xbe\nB\xc3\xa2n-l\xc3\xa2m-g\xc3\xba\n\xd0\x91\xd0\xb5\xd0\xbb\xd0\xb0\xd1\x80\xd1\x83\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f\n\xd0\x91\xd1\x8a\xd0\xbb\xd0\xb3\xd0\xb0\xd1\x80\xd1\x81\xd0\xba\xd0\xb8\nBosanski\nCatal\xc3\xa0\nCebuano\n\xc4\x8ce\xc5\xa1tina\nDansk\nDeutsch\nEesti\n\xce\x95\xce\xbb\xce\xbb\xce\xb7\xce\xbd\xce\xb9\xce\xba\xce\xac\nEspa\xc3\xb1ol\nEsperanto\nEuskara\n\xd9\x81\xd8\xa7\xd8\xb1\xd8\xb3\xdb\x8c\nFran\xc3\xa7ais\nGalego\n\xe0\xaa\x97\xe0\xab\x81\xe0\xaa\x9c\xe0\xaa\xb0\xe0\xaa\xbe\xe0\xaa\xa4\xe0\xab\x80\n\xed\x95\x9c\xea\xb5\xad\xec\x96\xb4\n\xd5\x80\xd5\xa1\xd5\xb5\xd5\xa5\xd6\x80\xd5\xa5\xd5\xb6\n\xe0\xa4\xb9\xe0\xa4\xbf\xe0\xa4\xa8\xe0\xa5\x8d\xe0\xa4\xa6\xe0\xa5\x80\nHrvatski\nBahasa Indonesia\nInterlingua\n\xc3\x8dslenska\nItaliano\n\xd7\xa2\xd7\x91\xd7\xa8\xd7\x99\xd7\xaa\n\xe1\x83\xa5\xe1\x83\x90\xe1\x83\xa0\xe1\x83\x97\xe1\x83\xa3\xe1\x83\x9a\xe1\x83\x98\n\xd2\x9a\xd0\xb0\xd0\xb7\xd0\xb0\xd2\x9b\xd1\x88\xd0\xb0\n\xd0\x9a\xd1\x8b\xd1\x80\xd0\xb3\xd1\x8b\xd0\xb7\xd1\x87\xd0\xb0\nLatina\nLatvie\xc5\xa1u\nLietuvi\xc5\xb3\nLa .lojban.\nLumbaart\nMagyar\n\xd0\x9c\xd0\xb0\xd0\xba\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8\n\xe0\xb4\xae\xe0\xb4\xb2\xe0\xb4\xaf\xe0\xb4\xbe\xe0\xb4\xb3\xe0\xb4\x82\n\xe0\xa4\xae\xe0\xa4\xb0\xe0\xa4\xbe\xe0\xa4\xa0\xe0\xa5\x80\nBahasa Melayu\n\xd0\x9c\xd0\xbe\xd0\xbd\xd0\xb3\xd0\xbe\xd0\xbb\n\xe1\x80\x99\xe1\x80\xbc\xe1\x80\x94\xe1\x80\xba\xe1\x80\x99\xe1\x80\xac\xe1\x80\x98\xe1\x80\xac\xe1\x80\x9e\xe1\x80\xac\nNederlands\n\xe0\xa4\xa8\xe0\xa5\x87\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb2\xe0\xa5\x80\n\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e\nNorsk\nNorsk nynorsk\n\xe0\xac\x93\xe0\xac\xa1\xe0\xac\xbc\xe0\xac\xbf\xe0\xac\x86\nO\xca\xbbzbekcha/\xd1\x9e\xd0\xb7\xd0\xb1\xd0\xb5\xd0\xba\xd1\x87\xd0\xb0\n\xd9\xbe\xd9\x86\xd8\xac\xd8\xa7\xd8\xa8\xdb\x8c\n\xe1\x9e\x97\xe1\x9e\xb6\xe1\x9e\x9f\xe1\x9e\xb6\xe1\x9e\x81\xe1\x9f\x92\xe1\x9e\x98\xe1\x9f\x82\xe1\x9e\x9a\nPlattd\xc3\xbc\xc3\xbctsch\nPolski\nPortugu\xc3\xaas\nRom\xc3\xa2n\xc4\x83\n\xd0\xa0\xd1\x83\xd1\x81\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\nScots\nShqip\n\xe0\xb7\x83\xe0\xb7\x92\xe0\xb6\x82\xe0\xb7\x84\xe0\xb6\xbd\nSimple English\nSloven\xc4\x8dina\nSloven\xc5\xa1\xc4\x8dina\n\xda\xa9\xd9\x88\xd8\xb1\xd8\xaf\xdb\x8c\n\xd0\xa1\xd1\x80\xd0\xbf\xd1\x81\xd0\xba\xd0\xb8 / srpski\nSrpskohrvatski / \xd1\x81\xd1\x80\xd0\xbf\xd1\x81\xd0\xba\xd0\xbe\xd1\x85\xd1\x80\xd0\xb2\xd0\xb0\xd1\x82\xd1\x81\xd0\xba\xd0\xb8\nSuomi\nSvenska\nTagalog\n\xe0\xae\xa4\xe0\xae\xae\xe0\xae\xbf\xe0\xae\xb4\xe0\xaf\x8d\n\xe0\xb0\xa4\xe0\xb1\x86\xe0\xb0\xb2\xe0\xb1\x81\xe0\xb0\x97\xe0\xb1\x81\n\xe0\xb9\x84\xe0\xb8\x97\xe0\xb8\xa2\n\xd0\xa2\xd0\xbe\xd2\xb7\xd0\xb8\xd0\xba\xd3\xa3\nT\xc3\xbcrk\xc3\xa7e\n\xe1\xa8\x85\xe1\xa8\x94 \xe1\xa8\x95\xe1\xa8\x98\xe1\xa8\x81\xe1\xa8\x97\n\xd0\xa3\xd0\xba\xd1\x80\xd0\xb0\xd1\x97\xd0\xbd\xd1\x81\xd1\x8c\xd0\xba\xd0\xb0\n\xd8\xa7\xd8\xb1\xd8\xaf\xd9\x88\nTi\xe1\xba\xbfng Vi\xe1\xbb\x87t\n\xe5\x90\xb4\xe8\xaf\xad\n\xe7\xb2\xb5\xe8\xaa\x9e\n\xe4\xb8\xad\xe6\x96\x87\n \n\n\nEdit links\n \n\n\n\n\n\n\n\n\n\n\n\n\n This page was last edited on 26 June 2018, at 09:19\n\xc2\xa0(UTC)\n.\n\n\nText is available under the \nCreative Commons Attribution-ShareAlike License\n;\nadditional terms may apply.  By using this site, you agree to the \nTerms of Use\n and \nPrivacy Policy\n. Wikipedia\xc2\xae is a registered trademark of the \nWikimedia Foundation, Inc.\n, a non-profit organization.\n\n\n\n\n\n\nPrivacy policy\n\n\nAbout Wikipedia\n\n\nDisclaimers\n\n\nContact Wikipedia\n\n\nDevelopers\n\n\nCookie statement\n\n\nMobile view\n\n\n\n\n\n\n\n\n \n\n\n\n\n \n\n\n\n\n\n\n\n\n(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"1.368","walltime":"1.617","ppvisitednodes":{"value":9392,"limit":1000000},"ppgeneratednodes":{"value":0,"limit":1500000},"postexpandincludesize":{"value":323225,"limit":2097152},"templateargumentsize":{"value":14613,"limit":2097152},"expansiondepth":{"value":25,"limit":40},"expensivefunctioncount":{"value":14,"limit":500},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":165338,"limit":5000000},"entityaccesscount":{"value":1,"limit":400},"timingprofile":["100.00% 1422.297      1 -total"," 59.51%  846.362      1 Template:Reflist"," 36.77%  522.963    139 Template:Cite_web"," 11.65%  165.677      2 Template:Infobox"," 10.84%  154.218      1 Template:Infobox_programming_language","  6.04%   85.906     14 Template:Cite_book","  4.68%   66.510      4 Template:Fix","  3.85%   54.791      1 Template:Infobox_software/simple","  3.41%   48.522      1 Template:Official_website","  3.36%   47.834      1 Template:Citation_needed"]},"scribunto":{"limitreport-timeusage":{"value":"0.746","limit":"10.000"},"limitreport-memusage":{"value":7251272,"limit":52428800}},"cachereport":{"origin":"mw1268","timestamp":"20180626131421","ttl":1900800,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":90,"wgHostname":"mw1262"});});\n\n\n\n\n\n'